
init.asm,4101
_init:     file format elf32-i386_init2,1
Disassembly of section .text:Disassembly5,37
char *argv[] = { "sh", 0 };char9,86
intint11,115
   a:	55                   	push   %ebpa17,280
   b:	89 e5                	mov    %esp,%ebpb18,320
   d:	53                   	push   %ebxd19,365
   e:	51                   	push   %ecxe20,405
   f:	83 ec 08             	sub    $0x8,%espf24,498
    pid = fork();pid50,1458
    pid = fork();pid55,1630
  a4:	50                   	push   %eaxa492,2993
  a5:	50                   	push   %eaxa593,3033
  a6:	68 e8 0a 00 00       	push   $0xae8a694,3073
  ab:	68 16 08 00 00       	push   $0x816ab95,3115
  b0:	e8 c5 02 00 00       	call   37a <exec>b096,3157
  b5:	5a                   	pop    %edxb598,3246
  b6:	59                   	pop    %ecxb699,3286
  b7:	68 19 08 00 00       	push   $0x819b7100,3326
  bc:	6a 01                	push   $0x1bc101,3368
  be:	e8 cd 03 00 00       	call   490 <printf>be102,3408
  c3:	e8 7a 02 00 00       	call   342 <exit>c3104,3470
  c8:	50                   	push   %eaxc8106,3544
  c9:	6a 01                	push   $0x1c9107,3584
  cb:	6a 01                	push   $0x1cb108,3624
  cd:	68 e8 07 00 00       	push   $0x7e8cd109,3664
  d2:	e8 b3 02 00 00       	call   38a <mknod>d2110,3706
  d7:	58                   	pop    %eaxd7112,3782
  d8:	5a                   	pop    %edxd8113,3822
  d9:	6a 02                	push   $0x2d9114,3862
  db:	68 e8 07 00 00       	push   $0x7e8db115,3902
  e0:	e8 9d 02 00 00       	call   382 <open>e0116,3944
  e5:	83 c4 10             	add    $0x10,%espe5117,3990
  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>e8118,4036
  ed:	66 90                	xchg   %ax,%axed119,4086
  ef:	90                   	nopef120,4129
  f0:	55                   	push   %ebpf0129,4256
  f1:	89 e5                	mov    %esp,%ebpf1130,4296
  f3:	53                   	push   %ebxf3131,4341
  f4:	8b 45 08             	mov    0x8(%ebp),%eaxf4132,4381
  f7:	8b 4d 0c             	mov    0xc(%ebp),%ecxf7133,4431
  os = s;os136,4494
  fa:	89 c2                	mov    %eax,%edxfa138,4532
  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esifc139,4577
intint157,5179
uintuint204,6888
static inline voidstatic246,8111
    cc = read(0, &c, 1);cc324,10673
intint386,12916
  fd = open(n, O_RDONLY);fd396,13144
  r = fstat(fd, st);r406,13516
  r = fstat(fd, st);r414,13819
intint436,14546
  n = 0;n445,14757
  n = 0;n450,14941
    n = n*10 + *s++ - '0';n456,15185
  dst = vdst;dst488,16239
  src = vsrc;src489,16253
  name: \name510,16965
static voidstatic651,20630
  neg = 0;neg664,20980
    neg = 1;neg669,21111
    x = -xx;x670,21124
    x = -xx;x676,21363
    neg = 1;neg678,21416
    x = xx;x681,21492
  i = 0;i684,21509
  neg = 0;neg736,23593
voidvoid757,24255
  state = 0;state769,24582
  ap = (uint*)(void*)&fmt + 1;ap770,24595
  ap = (uint*)(void*)&fmt + 1;ap776,24846
  state = 0;state779,24973
  ap = (uint*)(void*)&fmt + 1;ap781,25031
    c = fmt[i] & 0xff;c785,25224
    c = fmt[i] & 0xff;c806,26056
        state = '%';state811,26240
          s = "(null)";s832,26960
      state = 0;state865,28135
        state = '%';state886,28840
      state = 0;state901,29479
        s = (char*)*ap;s908,29762
      state = 0;state919,30185
        s = (char*)*ap;s921,30247
      state = 0;state947,31314
      state = 0;state983,32701
          s = "(null)";s986,32816
static Header base;static997,33201
static Header *freep;static998,33221
voidvoid1000,33244
  bp = (Header*)ap - 1;bp1006,33325
  bp = (Header*)ap - 1;bp1015,33671
  freep = p;freep1048,35009
  freep = p;freep1080,36343
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1111,37214
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1115,37399
  p = sbrk(nu * sizeof(Header));p1134,38208
      freep = prevp;freep1147,38748
  p = sbrk(nu * sizeof(Header));p1154,38967
      freep = prevp;freep1198,40611

forktest.asm,2439
_forktest:     file format elf32-i386_forktest2,1
Disassembly of section .text:Disassembly5,41
intint11,123
   a:	55                   	push   %ebpa17,288
   b:	89 e5                	mov    %esp,%ebpb18,328
   d:	51                   	push   %ecxd19,373
   e:	83 ec 04             	sub    $0x4,%espe20,413
    pid = fork();pid79,2579
  a0:	e8 05 03 00 00       	call   3aa <wait>a089,2941
  a5:	85 c0                	test   %eax,%eaxa590,2987
  a7:	78 5e                	js     107 <forktest+0xb7>a791,3032
  a9:	83 eb 01             	sub    $0x1,%ebxa993,3108
  ac:	75 f2                	jne    a0 <forktest+0x50>ac94,3153
  ae:	e8 f7 02 00 00       	call   3aa <wait>ae96,3227
  b3:	83 f8 ff             	cmp    $0xffffffff,%eaxb397,3273
  b6:	75 71                	jne    129 <forktest+0xd9>b698,3325
  b8:	83 ec 0c             	sub    $0xc,%espb8100,3407
  bb:	68 76 04 00 00       	push   $0x476bb101,3452
  c0:	e8 0b 01 00 00       	call   1d0 <strlen>c0102,3494
  c5:	83 c4 0c             	add    $0xc,%espc5103,3542
  c8:	50                   	push   %eaxc8104,3587
  c9:	68 76 04 00 00       	push   $0x476c9105,3627
  ce:	6a 01                	push   $0x1ce106,3669
  d0:	e8 ed 02 00 00       	call   3c2 <write>d0107,3709
  d5:	8b 5d fc             	mov    -0x4(%ebp),%ebxd5109,3758
  d8:	c9                   	leave  d8110,3809
  d9:	c3                   	ret    d9111,3845
  da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esida112,3881
  e0:	83 ec 0c             	sub    $0xc,%espe0114,3958
  e3:	68 84 04 00 00       	push   $0x484e3115,4003
  e8:	e8 e3 00 00 00       	call   1d0 <strlen>e8116,4045
  ed:	83 c4 0c             	add    $0xc,%esped117,4093
  f0:	50                   	push   %eaxf0118,4138
  f1:	68 84 04 00 00       	push   $0x484f1119,4178
  f6:	6a 01                	push   $0x1f6120,4220
  f8:	e8 c5 02 00 00       	call   3c2 <write>f8121,4260
  fd:	e8 a0 02 00 00       	call   3a2 <exit>fd123,4319
  os = s;os166,5746
intint187,6431
uintuint234,8140
static inline voidstatic276,9363
    cc = read(0, &c, 1);cc354,11925
intint416,14168
  fd = open(n, O_RDONLY);fd426,14396
  r = fstat(fd, st);r436,14768
  r = fstat(fd, st);r444,15071
intint466,15798
  n = 0;n475,16009
  n = 0;n480,16193
    n = n*10 + *s++ - '0';n486,16437
  dst = vdst;dst518,17491
  src = vsrc;src519,17505
  name: \name540,18217

runoff,16
pad()pad8,135

memlayout.h,265
#define EXTMEM EXTMEM3,18
#define PHYSTOP PHYSTOP4,82
#define DEVSPACE DEVSPACE5,141
#define KERNBASE KERNBASE8,289
#define KERNLINK KERNLINK9,357
#define V2P(V2P11,428
#define P2V(P2V12,469
#define V2P_WO(V2P_WO14,523
#define P2V_WO(P2V_WO15,595

stat.h,346
#define T_DIR T_DIR1,0
#define T_FILE T_FILE2,32
#define T_DEV T_DEV3,59
struct stat {stat5,89
  short type;  // Type of filetype6,103
  int dev;     // File system's disk devicedev7,134
  uint ino;    // Inode numberino8,178
  short nlink; // Number of links to filenlink9,209
  uint size;   // Size of file in bytessize10,251

initcode.asm,188
Disassembly of section .text:Disassembly5,42
start:start12,125
   a:	6a 00                	push   $0x0a18,282
   c:	b8 07 00 00 00       	mov    $0x7,%eaxc20,345
exit:exit27,485

bootmain.c,207
#define SECTSIZE SECTSIZE13,355
bootmain(void)bootmain18,418
waitdisk(void)waitdisk51,1181
readsect(void *dst, uint offset)readsect60,1319
readseg(uchar* pa, uint count, uint offset)readseg79,1764

wc.c,96
char buf[512];buf5,56
wc(int fd, char *name)wc8,77
main(int argc, char *argv[])main36,538

sign.pl,0

vectors.S,7605
vector0:vector05,82
vector1:vector110,143
vector2:vector215,204
vector3:vector320,265
vector4:vector425,326
vector5:vector530,387
vector6:vector635,448
vector7:vector740,509
vector8:vector845,570
vector9:vector949,620
vector10:vector1054,682
vector11:vector1158,735
vector12:vector1262,788
vector13:vector1366,841
vector14:vector1470,894
vector15:vector1574,947
vector16:vector1679,1011
vector17:vector1784,1075
vector18:vector1888,1128
vector19:vector1993,1192
vector20:vector2098,1256
vector21:vector21103,1320
vector22:vector22108,1384
vector23:vector23113,1448
vector24:vector24118,1512
vector25:vector25123,1576
vector26:vector26128,1640
vector27:vector27133,1704
vector28:vector28138,1768
vector29:vector29143,1832
vector30:vector30148,1896
vector31:vector31153,1960
vector32:vector32158,2024
vector33:vector33163,2088
vector34:vector34168,2152
vector35:vector35173,2216
vector36:vector36178,2280
vector37:vector37183,2344
vector38:vector38188,2408
vector39:vector39193,2472
vector40:vector40198,2536
vector41:vector41203,2600
vector42:vector42208,2664
vector43:vector43213,2728
vector44:vector44218,2792
vector45:vector45223,2856
vector46:vector46228,2920
vector47:vector47233,2984
vector48:vector48238,3048
vector49:vector49243,3112
vector50:vector50248,3176
vector51:vector51253,3240
vector52:vector52258,3304
vector53:vector53263,3368
vector54:vector54268,3432
vector55:vector55273,3496
vector56:vector56278,3560
vector57:vector57283,3624
vector58:vector58288,3688
vector59:vector59293,3752
vector60:vector60298,3816
vector61:vector61303,3880
vector62:vector62308,3944
vector63:vector63313,4008
vector64:vector64318,4072
vector65:vector65323,4136
vector66:vector66328,4200
vector67:vector67333,4264
vector68:vector68338,4328
vector69:vector69343,4392
vector70:vector70348,4456
vector71:vector71353,4520
vector72:vector72358,4584
vector73:vector73363,4648
vector74:vector74368,4712
vector75:vector75373,4776
vector76:vector76378,4840
vector77:vector77383,4904
vector78:vector78388,4968
vector79:vector79393,5032
vector80:vector80398,5096
vector81:vector81403,5160
vector82:vector82408,5224
vector83:vector83413,5288
vector84:vector84418,5352
vector85:vector85423,5416
vector86:vector86428,5480
vector87:vector87433,5544
vector88:vector88438,5608
vector89:vector89443,5672
vector90:vector90448,5736
vector91:vector91453,5800
vector92:vector92458,5864
vector93:vector93463,5928
vector94:vector94468,5992
vector95:vector95473,6056
vector96:vector96478,6120
vector97:vector97483,6184
vector98:vector98488,6248
vector99:vector99493,6312
vector100:vector100498,6377
vector101:vector101503,6444
vector102:vector102508,6511
vector103:vector103513,6578
vector104:vector104518,6645
vector105:vector105523,6712
vector106:vector106528,6779
vector107:vector107533,6846
vector108:vector108538,6913
vector109:vector109543,6980
vector110:vector110548,7047
vector111:vector111553,7114
vector112:vector112558,7181
vector113:vector113563,7248
vector114:vector114568,7315
vector115:vector115573,7382
vector116:vector116578,7449
vector117:vector117583,7516
vector118:vector118588,7583
vector119:vector119593,7650
vector120:vector120598,7717
vector121:vector121603,7784
vector122:vector122608,7851
vector123:vector123613,7918
vector124:vector124618,7985
vector125:vector125623,8052
vector126:vector126628,8119
vector127:vector127633,8186
vector128:vector128638,8253
vector129:vector129643,8320
vector130:vector130648,8387
vector131:vector131653,8454
vector132:vector132658,8521
vector133:vector133663,8588
vector134:vector134668,8655
vector135:vector135673,8722
vector136:vector136678,8789
vector137:vector137683,8856
vector138:vector138688,8923
vector139:vector139693,8990
vector140:vector140698,9057
vector141:vector141703,9124
vector142:vector142708,9191
vector143:vector143713,9258
vector144:vector144718,9325
vector145:vector145723,9392
vector146:vector146728,9459
vector147:vector147733,9526
vector148:vector148738,9593
vector149:vector149743,9660
vector150:vector150748,9727
vector151:vector151753,9794
vector152:vector152758,9861
vector153:vector153763,9928
vector154:vector154768,9995
vector155:vector155773,10062
vector156:vector156778,10129
vector157:vector157783,10196
vector158:vector158788,10263
vector159:vector159793,10330
vector160:vector160798,10397
vector161:vector161803,10464
vector162:vector162808,10531
vector163:vector163813,10598
vector164:vector164818,10665
vector165:vector165823,10732
vector166:vector166828,10799
vector167:vector167833,10866
vector168:vector168838,10933
vector169:vector169843,11000
vector170:vector170848,11067
vector171:vector171853,11134
vector172:vector172858,11201
vector173:vector173863,11268
vector174:vector174868,11335
vector175:vector175873,11402
vector176:vector176878,11469
vector177:vector177883,11536
vector178:vector178888,11603
vector179:vector179893,11670
vector180:vector180898,11737
vector181:vector181903,11804
vector182:vector182908,11871
vector183:vector183913,11938
vector184:vector184918,12005
vector185:vector185923,12072
vector186:vector186928,12139
vector187:vector187933,12206
vector188:vector188938,12273
vector189:vector189943,12340
vector190:vector190948,12407
vector191:vector191953,12474
vector192:vector192958,12541
vector193:vector193963,12608
vector194:vector194968,12675
vector195:vector195973,12742
vector196:vector196978,12809
vector197:vector197983,12876
vector198:vector198988,12943
vector199:vector199993,13010
vector200:vector200998,13077
vector201:vector2011003,13144
vector202:vector2021008,13211
vector203:vector2031013,13278
vector204:vector2041018,13345
vector205:vector2051023,13412
vector206:vector2061028,13479
vector207:vector2071033,13546
vector208:vector2081038,13613
vector209:vector2091043,13680
vector210:vector2101048,13747
vector211:vector2111053,13814
vector212:vector2121058,13881
vector213:vector2131063,13948
vector214:vector2141068,14015
vector215:vector2151073,14082
vector216:vector2161078,14149
vector217:vector2171083,14216
vector218:vector2181088,14283
vector219:vector2191093,14350
vector220:vector2201098,14417
vector221:vector2211103,14484
vector222:vector2221108,14551
vector223:vector2231113,14618
vector224:vector2241118,14685
vector225:vector2251123,14752
vector226:vector2261128,14819
vector227:vector2271133,14886
vector228:vector2281138,14953
vector229:vector2291143,15020
vector230:vector2301148,15087
vector231:vector2311153,15154
vector232:vector2321158,15221
vector233:vector2331163,15288
vector234:vector2341168,15355
vector235:vector2351173,15422
vector236:vector2361178,15489
vector237:vector2371183,15556
vector238:vector2381188,15623
vector239:vector2391193,15690
vector240:vector2401198,15757
vector241:vector2411203,15824
vector242:vector2421208,15891
vector243:vector2431213,15958
vector244:vector2441218,16025
vector245:vector2451223,16092
vector246:vector2461228,16159
vector247:vector2471233,16226
vector248:vector2481238,16293
vector249:vector2491243,16360
vector250:vector2501248,16427
vector251:vector2511253,16494
vector252:vector2521258,16561
vector253:vector2531263,16628
vector254:vector2541268,16695
vector255:vector2551273,16762
vectors:vectors1281,16849

sh.asm,43940
_sh:     file format elf32-i386_sh2,1
Disassembly of section .text:Disassembly5,35
intint11,98
       a:	55                   	push   %ebpa17,275
       b:	89 e5                	mov    %esp,%ebpb18,319
       d:	51                   	push   %ecxd19,368
       e:	83 ec 04             	sub    $0x4,%espe20,412
intint50,1608
  pid = fork();pid55,1638
  pid = fork();pid78,2671
      a1:	e8 6c 0c 00 00       	call   d12 <exit>a195,3317
      a6:	83 ec 0c             	sub    $0xc,%espa697,3396
      a9:	68 80 18 00 00       	push   $0x1880a998,3445
      ae:	e8 9d 09 00 00       	call   a50 <parsecmd>ae99,3492
      b3:	89 04 24             	mov    %eax,(%esp)b3100,3546
      b6:	e8 b5 00 00 00       	call   170 <runcmd>b6101,3597
      bb:	83 ec 0c             	sub    $0xc,%espbb103,3691
      be:	68 80 18 00 00       	push   $0x1880be104,3740
      c3:	e8 78 0a 00 00       	call   b40 <strlen>c3105,3787
      c8:	c7 04 24 83 18 00 00 	movl   $0x1883,(%esp)c8107,3866
      cf:	c6 80 7f 18 00 00 00 	movb   $0x0,0x187f(%eax)cf109,3962
      d6:	e8 a7 0c 00 00       	call   d82 <chdir>d6111,4046
      db:	83 c4 10             	add    $0x10,%espdb112,4097
      de:	85 c0                	test   %eax,%eaxde113,4147
      e0:	0f 89 6e ff ff ff    	jns    54 <main+0x54>e0114,4196
      e6:	50                   	push   %eaxe6116,4294
      e7:	68 83 18 00 00       	push   $0x1883e7117,4338
      ec:	68 61 12 00 00       	push   $0x1261ec118,4385
      f1:	6a 02                	push   $0x2f1119,4432
      f3:	e8 68 0d 00 00       	call   e60 <printf>f3120,4476
      f8:	83 c4 10             	add    $0x10,%espf8121,4528
      fb:	e9 54 ff ff ff       	jmp    54 <main+0x54>fb122,4578
  pid = fork();pid216,8321
  pid = fork();pid257,10150
  pid = fork();pid265,10475
  pid = fork();pid288,11372
  pid = fork();pid360,14239
  cmd = malloc(sizeof(*cmd));cmd388,15021
  cmd = malloc(sizeof(*cmd));cmd393,15230
  cmd = malloc(sizeof(*cmd));cmd421,16185
  cmd = malloc(sizeof(*cmd));cmd426,16394
  cmd = malloc(sizeof(*cmd));cmd472,18050
  cmd = malloc(sizeof(*cmd));cmd477,18258
  cmd = malloc(sizeof(*cmd));cmd514,19542
  cmd = malloc(sizeof(*cmd));cmd519,19750
  cmd = malloc(sizeof(*cmd));cmd556,21017
  cmd = malloc(sizeof(*cmd));cmd561,21225
char whitespace[] = " \t\r\n\v";char583,21996
char symbols[] = "<|>&;()";char584,22029
intint586,22058
  s = *ps;s598,22412
  s = *ps;s603,22588
  ret = *s;ret628,23701
    ret = 'a';ret638,24151
    ret = 'a';ret725,27945
  ret = *s;ret732,28252
      ret = '+';ret754,29188
intint762,29455
  s = *ps;s775,29893
    tok = gettoken(ps, es, 0, 0);tok848,32861
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd876,34144
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd879,34234
      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);cmd889,34697
      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);cmd894,34943
  ret = execcmd();ret949,36883
  cmd = (struct execcmd*)ret;cmd951,36955
  argc = 0;argc953,36986
  ret = parseredirs(ret, ps, es);ret954,36998
  ret = execcmd();ret956,37081
  ret = parseredirs(ret, ps, es);ret958,37156
    ret = parseredirs(ret, ps, es);ret973,37760
  cmd = parseexec(ps, es);cmd1073,42121
  cmd = parseexec(ps, es);cmd1079,42365
    cmd = pipecmd(cmd, parsepipe(ps, es));cmd1105,43487
    cmd = pipecmd(cmd, parsepipe(ps, es));cmd1120,44152
  cmd = parsepipe(ps, es);cmd1134,44717
  cmd = parsepipe(ps, es);cmd1140,44965
    cmd = backcmd(cmd);cmd1151,45441
    cmd = listcmd(cmd, parseline(ps, es));cmd1189,47134
    cmd = listcmd(cmd, parseline(ps, es));cmd1204,47799
  cmd = parseline(ps, es);cmd1232,48991
  cmd = parseline(ps, es);cmd1240,49323
  cmd = parseredirs(cmd, ps, es);cmd1256,50025
    bcmd = (struct backcmd*)cmd;bcmd1311,51989
     a00:	8b 4b 04             	mov    0x4(%ebx),%ecxa001345,53291
     a03:	8d 43 08             	lea    0x8(%ebx),%eaxa031346,53345
     a06:	85 c9                	test   %ecx,%ecxa061347,53399
     a08:	74 c4                	je     9ce <nulterminate+0x2e>a081348,53448
     a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esia0a1349,53511
     a10:	8b 50 24             	mov    0x24(%eax),%edxa101351,53592
     a13:	83 c0 04             	add    $0x4,%eaxa131352,53647
     a16:	c6 02 00             	movb   $0x0,(%edx)a161353,53696
     a19:	8b 50 fc             	mov    -0x4(%eax),%edxa191355,53780
     a1c:	85 d2                	test   %edx,%edxa1c1356,53835
     a1e:	75 f0                	jne    a10 <nulterminate+0x70>a1e1357,53884
     a20:	89 d8                	mov    %ebx,%eaxa201359,53949
     a22:	8b 5d fc             	mov    -0x4(%ebp),%ebxa221360,53998
     a25:	c9                   	leave  a251361,54053
     a26:	c3                   	ret    a261362,54093
     a27:	89 f6                	mov    %esi,%esia271363,54133
     a29:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia291364,54182
     a30:	83 ec 0c             	sub    $0xc,%espa301366,54272
     a33:	ff 73 04             	pushl  0x4(%ebx)a331367,54321
     a36:	e8 65 ff ff ff       	call   9a0 <nulterminate>a361368,54370
     a3b:	8b 43 0c             	mov    0xc(%ebx),%eaxa3b1370,54450
     a3e:	83 c4 10             	add    $0x10,%espa3e1372,54515
     a41:	c6 00 00             	movb   $0x0,(%eax)a411374,54587
     a44:	89 d8                	mov    %ebx,%eaxa441376,54640
     a46:	8b 5d fc             	mov    -0x4(%ebp),%ebxa461377,54689
     a49:	c9                   	leave  a491378,54744
     a4a:	c3                   	ret    a4a1379,54784
     a4b:	90                   	nopa4b1380,54824
     a4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esia4c1381,54860
     a50:	55                   	push   %ebpa501385,54945
     a51:	89 e5                	mov    %esp,%ebpa511386,54989
     a53:	56                   	push   %esia531387,55038
     a54:	53                   	push   %ebxa541388,55082
  es = s + strlen(s);es1389,55126
     a55:	8b 5d 08             	mov    0x8(%ebp),%ebxa551390,55148
     a58:	83 ec 0c             	sub    $0xc,%espa581391,55202
     a5b:	53                   	push   %ebxa5b1392,55251
     a5c:	e8 df 00 00 00       	call   b40 <strlen>a5c1393,55295
  cmd = parseline(&s, es);cmd1394,55347
     a61:	59                   	pop    %ecxa611395,55374
  es = s + strlen(s);es1396,55418
     a62:	01 c3                	add    %eax,%ebxa621397,55440
  cmd = parseline(&s, es);cmd1398,55489
     a64:	8d 45 08             	lea    0x8(%ebp),%eaxa641399,55516
     a67:	5e                   	pop    %esia671400,55570
     a68:	53                   	push   %ebxa681401,55614
     a69:	50                   	push   %eaxa691402,55658
     a6a:	e8 01 fe ff ff       	call   870 <parseline>a6a1403,55702
     a6f:	89 c6                	mov    %eax,%esia6f1404,55757
     a71:	8d 45 08             	lea    0x8(%ebp),%eaxa711406,55826
     a74:	83 c4 0c             	add    $0xc,%espa741407,55880
     a77:	68 d1 11 00 00       	push   $0x11d1a771408,55929
     a7c:	53                   	push   %ebxa7c1409,55976
     a7d:	50                   	push   %eaxa7d1410,56020
     a7e:	e8 4d fb ff ff       	call   5d0 <peek>a7e1411,56064
     a83:	8b 45 08             	mov    0x8(%ebp),%eaxa831413,56129
     a86:	83 c4 10             	add    $0x10,%espa861414,56183
     a89:	39 d8                	cmp    %ebx,%eaxa891415,56233
     a8b:	75 12                	jne    a9f <parsecmd+0x4f>a8b1416,56282
     a8d:	83 ec 0c             	sub    $0xc,%espa8d1418,56362
     a90:	56                   	push   %esia901419,56411
     a91:	e8 0a ff ff ff       	call   9a0 <nulterminate>a911420,56455
     a96:	8d 65 f8             	lea    -0x8(%ebp),%espa961422,56515
     a99:	89 f0                	mov    %esi,%eaxa991423,56570
     a9b:	5b                   	pop    %ebxa9b1424,56619
     a9c:	5e                   	pop    %esia9c1425,56663
     a9d:	5d                   	pop    %ebpa9d1426,56707
     a9e:	c3                   	ret    a9e1427,56751
     a9f:	52                   	push   %edxa9f1429,56828
     aa0:	50                   	push   %eaxaa01430,56872
     aa1:	68 4a 12 00 00       	push   $0x124aaa11431,56916
     aa6:	6a 02                	push   $0x2aa61432,56963
     aa8:	e8 b3 03 00 00       	call   e60 <printf>aa81433,57007
     aad:	c7 04 24 0e 12 00 00 	movl   $0x120e,(%esp)aad1435,57080
     ab4:	e8 97 f6 ff ff       	call   150 <panic>ab41436,57134
     ab9:	66 90                	xchg   %ax,%axab91437,57185
     abb:	66 90                	xchg   %ax,%axabb1438,57232
     abd:	66 90                	xchg   %ax,%axabd1439,57279
     abf:	90                   	nopabf1440,57326
     ac0:	55                   	push   %ebpac01449,57457
     ac1:	89 e5                	mov    %esp,%ebpac11450,57501
     ac3:	53                   	push   %ebxac31451,57550
     ac4:	8b 45 08             	mov    0x8(%ebp),%eaxac41452,57594
     ac7:	8b 4d 0c             	mov    0xc(%ebp),%ecxac71453,57648
  os = s;os1456,57715
     aca:	89 c2                	mov    %eax,%edxaca1458,57753
     acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esiacc1459,57802
     ad0:	83 c1 01             	add    $0x1,%ecxad01460,57863
     ad3:	0f b6 59 ff          	movzbl -0x1(%ecx),%ebxad31461,57912
     ad7:	83 c2 01             	add    $0x1,%edxad71462,57967
     ada:	84 db                	test   %bl,%blada1463,58016
     adc:	88 5a ff             	mov    %bl,-0x1(%edx)adc1464,58063
     adf:	75 ef                	jne    ad0 <strcpy+0x10>adf1465,58117
     ae1:	5b                   	pop    %ebxae11469,58195
     ae2:	5d                   	pop    %ebpae21470,58239
     ae3:	c3                   	ret    ae31471,58283
     ae4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esiae41472,58323
     aea:	8d bf 00 00 00 00    	lea    0x0(%edi),%ediaea1473,58377
intint1477,58452
     af0:	55                   	push   %ebpaf01480,58495
     af1:	89 e5                	mov    %esp,%ebpaf11481,58539
     af3:	53                   	push   %ebxaf31482,58588
     af4:	8b 55 08             	mov    0x8(%ebp),%edxaf41483,58632
     af7:	8b 4d 0c             	mov    0xc(%ebp),%ecxaf71484,58686
     afa:	0f b6 02             	movzbl (%edx),%eaxafa1486,58764
     afd:	0f b6 19             	movzbl (%ecx),%ebxafd1487,58815
     b00:	84 c0                	test   %al,%alb001488,58866
     b02:	75 1c                	jne    b20 <strcmp+0x30>b021489,58913
     b04:	eb 2a                	jmp    b30 <strcmp+0x40>b041490,58970
     b06:	8d 76 00             	lea    0x0(%esi),%esib061491,59027
     b09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edib091492,59081
     b10:	83 c2 01             	add    $0x1,%edxb101494,59156
     b13:	0f b6 02             	movzbl (%edx),%eaxb131496,59229
     b16:	83 c1 01             	add    $0x1,%ecxb161498,59294
     b19:	0f b6 19             	movzbl (%ecx),%ebxb191499,59343
     b1c:	84 c0                	test   %al,%alb1c1501,59418
     b1e:	74 10                	je     b30 <strcmp+0x40>b1e1502,59465
     b20:	38 d8                	cmp    %bl,%alb201503,59522
     b22:	74 ec                	je     b10 <strcmp+0x20>b221504,59569
     b24:	29 d8                	sub    %ebx,%eaxb241506,59658
     b26:	5b                   	pop    %ebxb261508,59709
     b27:	5d                   	pop    %ebpb271509,59753
     b28:	c3                   	ret    b281510,59797
     b29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esib291511,59837
     b30:	31 c0                	xor    %eax,%eaxb301512,59898
     b32:	29 d8                	sub    %ebx,%eaxb321514,59979
     b34:	5b                   	pop    %ebxb341516,60030
     b35:	5d                   	pop    %ebpb351517,60074
     b36:	c3                   	ret    b361518,60118
     b37:	89 f6                	mov    %esi,%esib371519,60158
     b39:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edib391520,60207
uintuint1524,60289
     b40:	55                   	push   %ebpb401527,60318
     b41:	89 e5                	mov    %esp,%ebpb411528,60362
     b43:	8b 4d 08             	mov    0x8(%ebp),%ecxb431529,60411
     b46:	80 39 00             	cmpb   $0x0,(%ecx)b461533,60499
     b49:	74 15                	je     b60 <strlen+0x20>b491534,60550
     b4b:	31 d2                	xor    %edx,%edxb4b1535,60607
     b4d:	8d 76 00             	lea    0x0(%esi),%esib4d1536,60656
     b50:	83 c2 01             	add    $0x1,%edxb501537,60710
     b53:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)b531538,60759
     b57:	89 d0                	mov    %edx,%eaxb571539,60817
     b59:	75 f5                	jne    b50 <strlen+0x10>b591540,60866
     b5b:	5d                   	pop    %ebpb5b1544,60943
     b5c:	c3                   	ret    b5c1545,60987
     b5d:	8d 76 00             	lea    0x0(%esi),%esib5d1546,61027
     b60:	31 c0                	xor    %eax,%eaxb601548,61105
     b62:	5d                   	pop    %ebpb621550,61156
     b63:	c3                   	ret    b631551,61200
     b64:	8d b6 00 00 00 00    	lea    0x0(%esi),%esib641552,61240
     b6a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edib6a1553,61294
     b70:	55                   	push   %ebpb701560,61410
     b71:	89 e5                	mov    %esp,%ebpb711561,61454
     b73:	57                   	push   %edib731562,61503
     b74:	8b 55 08             	mov    0x8(%ebp),%edxb741563,61547
static inline voidstatic1566,61604
     b77:	8b 4d 10             	mov    0x10(%ebp),%ecxb771570,61696
     b7a:	8b 45 0c             	mov    0xc(%ebp),%eaxb7a1571,61751
     b7d:	89 d7                	mov    %edx,%edib7d1572,61805
     b7f:	fc                   	cld    b7f1573,61854
     b80:	f3 aa                	rep stos %al,%es:(%edi)b801574,61894
     b82:	89 d0                	mov    %edx,%eaxb821578,61986
     b84:	5f                   	pop    %edib841579,62035
     b85:	5d                   	pop    %ebpb851580,62079
     b86:	c3                   	ret    b861581,62123
     b87:	89 f6                	mov    %esi,%esib871582,62163
     b89:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edib891583,62212
     b90:	55                   	push   %ebpb901590,62332
     b91:	89 e5                	mov    %esp,%ebpb911591,62376
     b93:	53                   	push   %ebxb931592,62425
     b94:	8b 45 08             	mov    0x8(%ebp),%eaxb941593,62469
     b97:	8b 5d 0c             	mov    0xc(%ebp),%ebxb971594,62523
     b9a:	0f b6 10             	movzbl (%eax),%edxb9a1596,62594
     b9d:	84 d2                	test   %dl,%dlb9d1597,62645
     b9f:	74 1d                	je     bbe <strchr+0x2e>b9f1598,62692
     ba1:	38 d3                	cmp    %dl,%blba11600,62765
     ba3:	89 d9                	mov    %ebx,%ecxba31601,62812
     ba5:	75 0d                	jne    bb4 <strchr+0x24>ba51602,62861
     ba7:	eb 17                	jmp    bc0 <strchr+0x30>ba71603,62918
     ba9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esiba91604,62975
     bb0:	38 ca                	cmp    %cl,%dlbb01605,63036
     bb2:	74 0c                	je     bc0 <strchr+0x30>bb21606,63083
     bb4:	83 c0 01             	add    $0x1,%eaxbb41608,63157
     bb7:	0f b6 10             	movzbl (%eax),%edxbb71609,63206
     bba:	84 d2                	test   %dl,%dlbba1610,63257
     bbc:	75 f2                	jne    bb0 <strchr+0x20>bbc1611,63304
     bbe:	31 c0                	xor    %eax,%eaxbbe1614,63396
     bc0:	5b                   	pop    %ebxbc01616,63447
     bc1:	5d                   	pop    %ebpbc11617,63491
     bc2:	c3                   	ret    bc21618,63535
     bc3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esibc31619,63575
     bc9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edibc91620,63629
     bd0:	55                   	push   %ebpbd01627,63742
     bd1:	89 e5                	mov    %esp,%ebpbd11628,63786
     bd3:	57                   	push   %edibd31629,63835
     bd4:	56                   	push   %esibd41630,63879
     bd5:	53                   	push   %ebxbd51631,63923
     bd6:	31 f6                	xor    %esi,%esibd61636,64016
     bd8:	89 f3                	mov    %esi,%ebxbd81637,64065
     bda:	83 ec 1c             	sub    $0x1c,%espbda1639,64116
     bdd:	8b 7d 08             	mov    0x8(%ebp),%edibdd1640,64166
     be0:	eb 2f                	jmp    c11 <gets+0x41>be01642,64245
     be2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esibe21643,64300
    cc = read(0, &c, 1);cc1644,64354
     be8:	8d 45 e7             	lea    -0x19(%ebp),%eaxbe81645,64379
     beb:	83 ec 04             	sub    $0x4,%espbeb1646,64435
     bee:	6a 01                	push   $0x1bee1647,64484
     bf0:	50                   	push   %eaxbf01648,64528
     bf1:	6a 00                	push   $0x0bf11649,64572
     bf3:	e8 32 01 00 00       	call   d2a <read>bf31650,64616
     bf8:	83 c4 10             	add    $0x10,%espbf81652,64681
     bfb:	85 c0                	test   %eax,%eaxbfb1653,64731
     bfd:	7e 1c                	jle    c1b <gets+0x4b>bfd1654,64780
     bff:	0f b6 45 e7          	movzbl -0x19(%ebp),%eaxbff1657,64866
     c03:	83 c7 01             	add    $0x1,%edic031658,64922
     c06:	88 47 ff             	mov    %al,-0x1(%edi)c061659,64971
     c09:	3c 0a                	cmp    $0xa,%alc091661,65056
     c0b:	74 23                	je     c30 <gets+0x60>c0b1662,65104
     c0d:	3c 0d                	cmp    $0xd,%alc0d1663,65159
     c0f:	74 1f                	je     c30 <gets+0x60>c0f1664,65207
     c11:	83 c3 01             	add    $0x1,%ebxc111666,65287
     c14:	3b 5d 0c             	cmp    0xc(%ebp),%ebxc141667,65336
     c17:	89 fe                	mov    %edi,%esic171668,65390
     c19:	7c cd                	jl     be8 <gets+0x18>c191669,65439
     c1b:	89 f3                	mov    %esi,%ebxc1b1670,65494
     c1d:	8b 45 08             	mov    0x8(%ebp),%eaxc1d1676,65593
     c20:	c6 03 00             	movb   $0x0,(%ebx)c201678,65664
     c23:	8d 65 f4             	lea    -0xc(%ebp),%espc231680,65717
     c26:	5b                   	pop    %ebxc261681,65772
     c27:	5e                   	pop    %esic271682,65816
     c28:	5f                   	pop    %edic281683,65860
     c29:	5d                   	pop    %ebpc291684,65904
     c2a:	c3                   	ret    c2a1685,65948
     c2b:	90                   	nopc2b1686,65988
     c2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esic2c1687,66024
     c30:	8b 75 08             	mov    0x8(%ebp),%esic301688,66085
     c33:	8b 45 08             	mov    0x8(%ebp),%eaxc331689,66139
     c36:	01 de                	add    %ebx,%esic361690,66193
     c38:	89 f3                	mov    %esi,%ebxc381691,66242
     c3a:	c6 03 00             	movb   $0x0,(%ebx)c3a1693,66308
     c3d:	8d 65 f4             	lea    -0xc(%ebp),%espc3d1695,66361
     c40:	5b                   	pop    %ebxc401696,66416
     c41:	5e                   	pop    %esic411697,66460
     c42:	5f                   	pop    %edic421698,66504
     c43:	5d                   	pop    %ebpc431699,66548
     c44:	c3                   	ret    c441700,66592
     c45:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esic451701,66632
     c49:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edic491702,66693
intint1706,66773
     c50:	55                   	push   %ebpc501709,66816
     c51:	89 e5                	mov    %esp,%ebpc511710,66860
     c53:	56                   	push   %esic531711,66909
     c54:	53                   	push   %ebxc541712,66953
  fd = open(n, O_RDONLY);fd1716,67017
     c55:	83 ec 08             	sub    $0x8,%espc551717,67043
     c58:	6a 00                	push   $0x0c581718,67092
     c5a:	ff 75 08             	pushl  0x8(%ebp)c5a1719,67136
     c5d:	e8 f0 00 00 00       	call   d52 <open>c5d1720,67185
     c62:	83 c4 10             	add    $0x10,%espc621722,67248
     c65:	85 c0                	test   %eax,%eaxc651723,67298
     c67:	78 27                	js     c90 <stat+0x40>c671724,67347
  r = fstat(fd, st);r1726,67417
     c69:	83 ec 08             	sub    $0x8,%espc691727,67438
     c6c:	ff 75 0c             	pushl  0xc(%ebp)c6c1728,67487
     c6f:	89 c3                	mov    %eax,%ebxc6f1729,67536
     c71:	50                   	push   %eaxc711730,67585
     c72:	e8 f3 00 00 00       	call   d6a <fstat>c721731,67629
     c77:	89 1c 24             	mov    %ebx,(%esp)c771733,67693
  r = fstat(fd, st);r1734,67744
     c7a:	89 c6                	mov    %eax,%esic7a1735,67765
     c7c:	e8 b9 00 00 00       	call   d3a <close>c7c1737,67827
     c81:	83 c4 10             	add    $0x10,%espc811739,67890
     c84:	8d 65 f8             	lea    -0x8(%ebp),%espc841741,67942
     c87:	89 f0                	mov    %esi,%eaxc871742,67997
     c89:	5b                   	pop    %ebxc891743,68046
     c8a:	5e                   	pop    %esic8a1744,68090
     c8b:	5d                   	pop    %ebpc8b1745,68134
     c8c:	c3                   	ret    c8c1746,68178
     c8d:	8d 76 00             	lea    0x0(%esi),%esic8d1747,68218
     c90:	be ff ff ff ff       	mov    $0xffffffff,%esic901749,68287
     c95:	eb ed                	jmp    c84 <stat+0x34>c951750,68343
     c97:	89 f6                	mov    %esi,%esic971751,68398
     c99:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edic991752,68447
intint1756,68527
     ca0:	55                   	push   %ebpca01759,68553
     ca1:	89 e5                	mov    %esp,%ebpca11760,68597
     ca3:	53                   	push   %ebxca31761,68646
     ca4:	8b 4d 08             	mov    0x8(%ebp),%ecxca41762,68690
  n = 0;n1765,68754
     ca7:	0f be 11             	movsbl (%ecx),%edxca71767,68795
     caa:	8d 42 d0             	lea    -0x30(%edx),%eaxcaa1768,68846
     cad:	3c 09                	cmp    $0x9,%alcad1769,68902
  n = 0;n1770,68950
     caf:	b8 00 00 00 00       	mov    $0x0,%eaxcaf1771,68959
     cb4:	77 1f                	ja     cd5 <atoi+0x35>cb41773,69040
     cb6:	8d 76 00             	lea    0x0(%esi),%esicb61774,69095
     cb9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edicb91775,69149
    n = n*10 + *s++ - '0';n1776,69210
     cc0:	8d 04 80             	lea    (%eax,%eax,4),%eaxcc01777,69237
     cc3:	83 c1 01             	add    $0x1,%ecxcc31778,69295
     cc6:	8d 44 42 d0          	lea    -0x30(%edx,%eax,2),%eaxcc61779,69344
     cca:	0f be 11             	movsbl (%ecx),%edxcca1781,69439
     ccd:	8d 5a d0             	lea    -0x30(%edx),%ebxccd1782,69490
     cd0:	80 fb 09             	cmp    $0x9,%blcd01783,69546
     cd3:	76 eb                	jbe    cc0 <atoi+0x20>cd31784,69594
     cd5:	5b                   	pop    %ebxcd51787,69663
     cd6:	5d                   	pop    %ebpcd61788,69707
     cd7:	c3                   	ret    cd71789,69751
     cd8:	90                   	nopcd81790,69791
     cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esicd91791,69827
     ce0:	55                   	push   %ebpce01798,69963
     ce1:	89 e5                	mov    %esp,%ebpce11799,70007
     ce3:	56                   	push   %esice31800,70056
     ce4:	53                   	push   %ebxce41801,70100
     ce5:	8b 5d 10             	mov    0x10(%ebp),%ebxce51802,70144
     ce8:	8b 45 08             	mov    0x8(%ebp),%eaxce81803,70199
     ceb:	8b 75 0c             	mov    0xc(%ebp),%esiceb1804,70253
  dst = vdst;dst1808,70340
  src = vsrc;src1809,70354
     cee:	85 db                	test   %ebx,%ebxcee1811,70385
     cf0:	7e 14                	jle    d06 <memmove+0x26>cf01812,70434
     cf2:	31 d2                	xor    %edx,%edxcf21813,70492
     cf4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esicf41814,70541
     cf8:	0f b6 0c 16          	movzbl (%esi,%edx,1),%ecxcf81816,70623
     cfc:	88 0c 10             	mov    %cl,(%eax,%edx,1)cfc1817,70681
     cff:	83 c2 01             	add    $0x1,%edxcff1818,70738
     d02:	39 d3                	cmp    %edx,%ebxd021820,70804
     d04:	75 f2                	jne    cf8 <memmove+0x18>d041821,70853
     d06:	5b                   	pop    %ebxd061824,70928
     d07:	5e                   	pop    %esid071825,70972
     d08:	5d                   	pop    %ebpd081826,71016
     d09:	c3                   	ret    d091827,71060
  name: \name1830,71118
     d0a:	b8 01 00 00 00       	mov    $0x1,%eaxd0a1836,71205
     d0f:	cd 40                	int    $0x40d0f1837,71254
     d11:	c3                   	ret    d111838,71299
     d12:	b8 02 00 00 00       	mov    $0x2,%eaxd121842,71371
     d17:	cd 40                	int    $0x40d171843,71420
     d19:	c3                   	ret    d191844,71465
     d1a:	b8 03 00 00 00       	mov    $0x3,%eaxd1a1848,71537
     d1f:	cd 40                	int    $0x40d1f1849,71586
     d21:	c3                   	ret    d211850,71631
     d22:	b8 04 00 00 00       	mov    $0x4,%eaxd221854,71703
     d27:	cd 40                	int    $0x40d271855,71752
     d29:	c3                   	ret    d291856,71797
     d2a:	b8 05 00 00 00       	mov    $0x5,%eaxd2a1860,71869
     d2f:	cd 40                	int    $0x40d2f1861,71918
     d31:	c3                   	ret    d311862,71963
     d32:	b8 10 00 00 00       	mov    $0x10,%eaxd321866,72037
     d37:	cd 40                	int    $0x40d371867,72087
     d39:	c3                   	ret    d391868,72132
     d3a:	b8 15 00 00 00       	mov    $0x15,%eaxd3a1872,72206
     d3f:	cd 40                	int    $0x40d3f1873,72256
     d41:	c3                   	ret    d411874,72301
     d42:	b8 06 00 00 00       	mov    $0x6,%eaxd421878,72373
     d47:	cd 40                	int    $0x40d471879,72422
     d49:	c3                   	ret    d491880,72467
     d4a:	b8 07 00 00 00       	mov    $0x7,%eaxd4a1884,72539
     d4f:	cd 40                	int    $0x40d4f1885,72588
     d51:	c3                   	ret    d511886,72633
     d52:	b8 0f 00 00 00       	mov    $0xf,%eaxd521890,72705
     d57:	cd 40                	int    $0x40d571891,72754
     d59:	c3                   	ret    d591892,72799
     d5a:	b8 11 00 00 00       	mov    $0x11,%eaxd5a1896,72873
     d5f:	cd 40                	int    $0x40d5f1897,72923
     d61:	c3                   	ret    d611898,72968
     d62:	b8 12 00 00 00       	mov    $0x12,%eaxd621902,73044
     d67:	cd 40                	int    $0x40d671903,73094
     d69:	c3                   	ret    d691904,73139
     d6a:	b8 08 00 00 00       	mov    $0x8,%eaxd6a1908,73213
     d6f:	cd 40                	int    $0x40d6f1909,73262
     d71:	c3                   	ret    d711910,73307
     d72:	b8 13 00 00 00       	mov    $0x13,%eaxd721914,73379
     d77:	cd 40                	int    $0x40d771915,73429
     d79:	c3                   	ret    d791916,73474
     d7a:	b8 14 00 00 00       	mov    $0x14,%eaxd7a1920,73548
     d7f:	cd 40                	int    $0x40d7f1921,73598
     d81:	c3                   	ret    d811922,73643
     d82:	b8 09 00 00 00       	mov    $0x9,%eaxd821926,73717
     d87:	cd 40                	int    $0x40d871927,73766
     d89:	c3                   	ret    d891928,73811
     d8a:	b8 0a 00 00 00       	mov    $0xa,%eaxd8a1932,73881
     d8f:	cd 40                	int    $0x40d8f1933,73930
     d91:	c3                   	ret    d911934,73975
     d92:	b8 0b 00 00 00       	mov    $0xb,%eaxd921938,74051
     d97:	cd 40                	int    $0x40d971939,74100
     d99:	c3                   	ret    d991940,74145
     d9a:	b8 0c 00 00 00       	mov    $0xc,%eaxd9a1944,74217
     d9f:	cd 40                	int    $0x40d9f1945,74266
     da1:	c3                   	ret    da11946,74311
     da2:	b8 0d 00 00 00       	mov    $0xd,%eaxda21950,74385
     da7:	cd 40                	int    $0x40da71951,74434
     da9:	c3                   	ret    da91952,74479
     daa:	b8 0e 00 00 00       	mov    $0xe,%eaxdaa1956,74555
     daf:	cd 40                	int    $0x40daf1957,74604
     db1:	c3                   	ret    db11958,74649
     db2:	66 90                	xchg   %ax,%axdb21959,74689
     db4:	66 90                	xchg   %ax,%axdb41960,74736
     db6:	66 90                	xchg   %ax,%axdb61961,74783
     db8:	66 90                	xchg   %ax,%axdb81962,74830
     dba:	66 90                	xchg   %ax,%axdba1963,74877
     dbc:	66 90                	xchg   %ax,%axdbc1964,74924
     dbe:	66 90                	xchg   %ax,%axdbe1965,74971
static voidstatic1971,75063
     dc0:	55                   	push   %ebpdc01974,75121
     dc1:	89 e5                	mov    %esp,%ebpdc11975,75165
     dc3:	57                   	push   %edidc31976,75214
     dc4:	56                   	push   %esidc41977,75258
     dc5:	53                   	push   %ebxdc51978,75302
     dc6:	83 ec 3c             	sub    $0x3c,%espdc61979,75346
  neg = 0;neg1984,75437
     dc9:	85 d2                	test   %edx,%edxdc91986,75469
     dcb:	89 45 c0             	mov    %eax,-0x40(%ebp)dcb1988,75520
    neg = 1;neg1989,75576
    x = -xx;x1990,75589
     dce:	89 d0                	mov    %edx,%eaxdce1991,75602
     dd0:	79 76                	jns    e48 <printint+0x88>dd01993,75672
     dd2:	f6 45 08 01          	testb  $0x1,0x8(%ebp)dd21994,75731
     dd6:	74 70                	je     e48 <printint+0x88>dd61995,75785
    x = -xx;x1996,75844
     dd8:	f7 d8                	neg    %eaxdd81997,75857
    neg = 1;neg1998,75901
     dda:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)dda1999,75914
    x = xx;x2001,75981
  i = 0;i2004,75998
     de1:	31 f6                	xor    %esi,%eside12005,76007
     de3:	8d 5d d7             	lea    -0x29(%ebp),%ebxde32006,76056
     de6:	eb 0a                	jmp    df2 <printint+0x32>de62007,76112
     de8:	90                   	nopde82008,76171
     de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%eside92009,76207
     df0:	89 fe                	mov    %edi,%esidf02012,76307
     df2:	31 d2                	xor    %edx,%edxdf22013,76356
     df4:	8d 7e 01             	lea    0x1(%esi),%edidf42014,76405
     df7:	f7 f1                	div    %ecxdf72015,76459
     df9:	0f b6 92 a8 12 00 00 	movzbl 0x12a8(%edx),%edxdf92016,76503
     e00:	85 c0                	test   %eax,%eaxe002018,76588
     e02:	88 14 3b             	mov    %dl,(%ebx,%edi,1)e022020,76670
     e05:	75 e9                	jne    df0 <printint+0x30>e052022,76755
     e07:	8b 45 c4             	mov    -0x3c(%ebp),%eaxe072024,76824
     e0a:	85 c0                	test   %eax,%eaxe0a2025,76880
     e0c:	74 08                	je     e16 <printint+0x56>e0c2026,76929
     e0e:	c6 44 3d d8 2d       	movb   $0x2d,-0x28(%ebp,%edi,1)e0e2028,77008
     e13:	8d 7e 02             	lea    0x2(%esi),%edie132029,77072
     e16:	8d 74 3d d7          	lea    -0x29(%ebp,%edi,1),%esie162030,77126
     e1a:	8b 7d c0             	mov    -0x40(%ebp),%edie1a2031,77189
     e1d:	8d 76 00             	lea    0x0(%esi),%esie1d2032,77245
     e20:	0f b6 06             	movzbl (%esi),%eaxe202033,77299
     e23:	83 ec 04             	sub    $0x4,%espe232035,77370
     e26:	83 ee 01             	sub    $0x1,%esie262036,77419
     e29:	6a 01                	push   $0x1e292037,77468
     e2b:	53                   	push   %ebxe2b2038,77512
     e2c:	57                   	push   %edie2c2039,77556
     e2d:	88 45 d7             	mov    %al,-0x29(%ebp)e2d2040,77600
     e30:	e8 fd fe ff ff       	call   d32 <write>e302041,77655
     e35:	83 c4 10             	add    $0x10,%espe352044,77725
     e38:	39 de                	cmp    %ebx,%esie382045,77775
     e3a:	75 e4                	jne    e20 <printint+0x60>e3a2046,77824
     e3c:	8d 65 f4             	lea    -0xc(%ebp),%espe3c2049,77907
     e3f:	5b                   	pop    %ebxe3f2050,77962
     e40:	5e                   	pop    %esie402051,78006
     e41:	5f                   	pop    %edie412052,78050
     e42:	5d                   	pop    %ebpe422053,78094
     e43:	c3                   	ret    e432054,78138
     e44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie442055,78178
  neg = 0;neg2056,78239
     e48:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)e482057,78250
     e4f:	eb 90                	jmp    de1 <printint+0x21>e4f2058,78306
     e51:	eb 0d                	jmp    e60 <printf>e512059,78365
     e53:	90                   	nope532060,78417
     e54:	90                   	nope542061,78453
     e55:	90                   	nope552062,78489
     e56:	90                   	nope562063,78525
     e57:	90                   	nope572064,78561
     e58:	90                   	nope582065,78597
     e59:	90                   	nope592066,78633
     e5a:	90                   	nope5a2067,78669
     e5b:	90                   	nope5b2068,78705
     e5c:	90                   	nope5c2069,78741
     e5d:	90                   	nope5d2070,78777
     e5e:	90                   	nope5e2071,78813
     e5f:	90                   	nope5f2072,78849
voidvoid2077,78965
     e60:	55                   	push   %ebpe602080,79009
     e61:	89 e5                	mov    %esp,%ebpe612081,79053
     e63:	57                   	push   %edie632082,79102
     e64:	56                   	push   %esie642083,79146
     e65:	53                   	push   %ebxe652084,79190
     e66:	83 ec 2c             	sub    $0x2c,%espe662085,79234
  state = 0;state2089,79316
  ap = (uint*)(void*)&fmt + 1;ap2090,79329
     e69:	8b 75 0c             	mov    0xc(%ebp),%esie692092,79387
     e6c:	0f b6 1e             	movzbl (%esi),%ebxe6c2093,79441
     e6f:	84 db                	test   %bl,%ble6f2094,79492
     e71:	0f 84 b3 00 00 00    	je     f2a <printf+0xca>e712095,79539
  ap = (uint*)(void*)&fmt + 1;ap2096,79596
     e77:	8d 45 10             	lea    0x10(%ebp),%eaxe772097,79627
     e7a:	83 c6 01             	add    $0x1,%esie7a2098,79682
  state = 0;state2099,79731
     e7d:	31 ff                	xor    %edi,%edie7d2100,79744
  ap = (uint*)(void*)&fmt + 1;ap2101,79793
     e7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)e7f2102,79824
     e82:	eb 2f                	jmp    eb3 <printf+0x53>e822103,79880
     e84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie842104,79937
    c = fmt[i] & 0xff;c2105,79998
     e88:	83 f8 25             	cmp    $0x25,%eaxe882108,80061
     e8b:	0f 84 a7 00 00 00    	je     f38 <printf+0xd8>e8b2109,80111
     e91:	8d 45 e2             	lea    -0x1e(%ebp),%eaxe912111,80188
     e94:	83 ec 04             	sub    $0x4,%espe942112,80244
     e97:	88 5d e2             	mov    %bl,-0x1e(%ebp)e972113,80293
     e9a:	6a 01                	push   $0x1e9a2114,80348
     e9c:	50                   	push   %eaxe9c2115,80392
     e9d:	ff 75 08             	pushl  0x8(%ebp)e9d2116,80436
     ea0:	e8 8d fe ff ff       	call   d32 <write>ea02117,80485
     ea5:	83 c4 10             	add    $0x10,%espea52118,80536
     ea8:	83 c6 01             	add    $0x1,%esiea82119,80586
     eab:	0f b6 5e ff          	movzbl -0x1(%esi),%ebxeab2121,80662
     eaf:	84 db                	test   %bl,%bleaf2122,80717
     eb1:	74 77                	je     f2a <printf+0xca>eb12123,80764
     eb3:	85 ff                	test   %edi,%edieb32125,80841
    c = fmt[i] & 0xff;c2126,80890
     eb5:	0f be cb             	movsbl %bl,%ecxeb52127,80913
     eb8:	0f b6 c3             	movzbl %bl,%eaxeb82128,80961
     ebb:	74 cb                	je     e88 <printf+0x28>ebb2130,81029
        state = '%';state2131,81086
     ebd:	83 ff 25             	cmp    $0x25,%ediebd2136,81180
     ec0:	75 e6                	jne    ea8 <printf+0x48>ec02137,81230
     ec2:	83 f8 64             	cmp    $0x64,%eaxec22139,81307
     ec5:	0f 84 05 01 00 00    	je     fd0 <printf+0x170>ec52140,81357
     ecb:	81 e1 f7 00 00 00    	and    $0xf7,%ecxecb2144,81502
     ed1:	83 f9 70             	cmp    $0x70,%ecxed12145,81552
     ed4:	74 72                	je     f48 <printf+0xe8>ed42146,81602
     ed6:	83 f8 73             	cmp    $0x73,%eaxed62150,81734
     ed9:	0f 84 99 00 00 00    	je     f78 <printf+0x118>ed92151,81784
          s = "(null)";s2152,81842
     edf:	83 f8 63             	cmp    $0x63,%eaxedf2158,81966
     ee2:	0f 84 08 01 00 00    	je     ff0 <printf+0x190>ee22159,82016
     ee8:	83 f8 25             	cmp    $0x25,%eaxee82163,82138
     eeb:	0f 84 ef 00 00 00    	je     fe0 <printf+0x180>eeb2164,82188
     ef1:	8d 45 e7             	lea    -0x19(%ebp),%eaxef12166,82266
     ef4:	83 ec 04             	sub    $0x4,%espef42167,82322
     ef7:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)ef72168,82371
     efb:	6a 01                	push   $0x1efb2169,82428
     efd:	50                   	push   %eaxefd2170,82472
     efe:	ff 75 08             	pushl  0x8(%ebp)efe2171,82516
     f01:	e8 2c fe ff ff       	call   d32 <write>f012172,82565
     f06:	83 c4 0c             	add    $0xc,%espf062173,82616
     f09:	8d 45 e6             	lea    -0x1a(%ebp),%eaxf092174,82665
     f0c:	88 5d e6             	mov    %bl,-0x1a(%ebp)f0c2175,82721
     f0f:	6a 01                	push   $0x1f0f2176,82776
     f11:	50                   	push   %eaxf112177,82820
     f12:	ff 75 08             	pushl  0x8(%ebp)f122178,82864
     f15:	83 c6 01             	add    $0x1,%esif152179,82913
      state = 0;state2185,83089
     f18:	31 ff                	xor    %edi,%edif182186,83106
     f1a:	e8 13 fe ff ff       	call   d32 <write>f1a2188,83175
     f1f:	0f b6 5e ff          	movzbl -0x1(%esi),%ebxf1f2190,83253
     f23:	83 c4 10             	add    $0x10,%espf232192,83328
     f26:	84 db                	test   %bl,%blf262194,83405
     f28:	75 89                	jne    eb3 <printf+0x53>f282195,83452
     f2a:	8d 65 f4             	lea    -0xc(%ebp),%espf2a2199,83521
     f2d:	5b                   	pop    %ebxf2d2200,83576
     f2e:	5e                   	pop    %esif2e2201,83620
     f2f:	5f                   	pop    %edif2f2202,83664
     f30:	5d                   	pop    %ebpf302203,83708
     f31:	c3                   	ret    f312204,83752
     f32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif322205,83792
        state = '%';state2206,83846
     f38:	bf 25 00 00 00       	mov    $0x25,%edif382207,83867
     f3d:	e9 66 ff ff ff       	jmp    ea8 <printf+0x48>f3d2208,83917
     f42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif422209,83974
     f48:	83 ec 0c             	sub    $0xc,%espf482211,84062
     f4b:	b9 10 00 00 00       	mov    $0x10,%ecxf4b2212,84111
     f50:	6a 00                	push   $0x0f502213,84161
     f52:	8b 7d d4             	mov    -0x2c(%ebp),%edif522214,84205
     f55:	8b 45 08             	mov    0x8(%ebp),%eaxf552215,84261
     f58:	8b 17                	mov    (%edi),%edxf582216,84315
     f5a:	e8 61 fe ff ff       	call   dc0 <printint>f5a2217,84366
     f5f:	89 f8                	mov    %edi,%eaxf5f2219,84434
     f61:	83 c4 10             	add    $0x10,%espf612220,84483
      state = 0;state2221,84533
     f64:	31 ff                	xor    %edi,%edif642222,84550
     f66:	83 c0 04             	add    $0x4,%eaxf662224,84613
     f69:	89 45 d4             	mov    %eax,-0x2c(%ebp)f692225,84662
     f6c:	e9 37 ff ff ff       	jmp    ea8 <printf+0x48>f6c2226,84718
     f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif712227,84775
        s = (char*)*ap;s2228,84836
     f78:	8b 45 d4             	mov    -0x2c(%ebp),%eaxf782229,84860
     f7b:	8b 08                	mov    (%eax),%ecxf7b2230,84916
     f7d:	83 c0 04             	add    $0x4,%eaxf7d2232,84981
     f80:	89 45 d4             	mov    %eax,-0x2c(%ebp)f802233,85030
     f83:	85 c9                	test   %ecx,%ecxf832235,85105
     f85:	0f 84 8e 00 00 00    	je     1019 <printf+0x1b9>f852236,85154
     f8b:	0f b6 01             	movzbl (%ecx),%eaxf8b2238,85237
      state = 0;state2239,85288
     f8e:	31 ff                	xor    %edi,%edif8e2240,85305
        s = (char*)*ap;s2241,85354
     f90:	89 cb                	mov    %ecx,%ebxf902242,85378
     f92:	84 c0                	test   %al,%alf922244,85451
     f94:	0f 84 0e ff ff ff    	je     ea8 <printf+0x48>f942245,85498
     f9a:	89 75 d0             	mov    %esi,-0x30(%ebp)f9a2246,85555
     f9d:	89 de                	mov    %ebx,%esif9d2247,85611
     f9f:	8b 5d 08             	mov    0x8(%ebp),%ebxf9f2248,85660
     fa2:	8d 7d e3             	lea    -0x1d(%ebp),%edifa22249,85714
     fa5:	8d 76 00             	lea    0x0(%esi),%esifa52250,85770
     fa8:	83 ec 04             	sub    $0x4,%espfa82252,85844
     fab:	83 c6 01             	add    $0x1,%esifab2254,85908
     fae:	88 45 e3             	mov    %al,-0x1d(%ebp)fae2255,85957
     fb1:	6a 01                	push   $0x1fb12257,86032
     fb3:	57                   	push   %edifb32258,86076
     fb4:	53                   	push   %ebxfb42259,86120
     fb5:	e8 78 fd ff ff       	call   d32 <write>fb52260,86164
     fba:	0f b6 06             	movzbl (%esi),%eaxfba2262,86239
     fbd:	83 c4 10             	add    $0x10,%espfbd2263,86290
     fc0:	84 c0                	test   %al,%alfc02264,86340
     fc2:	75 e4                	jne    fa8 <printf+0x148>fc22265,86387
     fc4:	8b 75 d0             	mov    -0x30(%ebp),%esifc42266,86445
      state = 0;state2267,86501
     fc7:	31 ff                	xor    %edi,%edifc72268,86518
     fc9:	e9 da fe ff ff       	jmp    ea8 <printf+0x48>fc92269,86567
     fce:	66 90                	xchg   %ax,%axfce2270,86624
     fd0:	83 ec 0c             	sub    $0xc,%espfd02272,86705
     fd3:	b9 0a 00 00 00       	mov    $0xa,%ecxfd32273,86754
     fd8:	6a 01                	push   $0x1fd82274,86803
     fda:	e9 73 ff ff ff       	jmp    f52 <printf+0xf2>fda2275,86847
     fdf:	90                   	nopfdf2276,86904
     fe0:	83 ec 04             	sub    $0x4,%espfe02278,86960
     fe3:	88 5d e5             	mov    %bl,-0x1b(%ebp)fe32279,87009
     fe6:	8d 45 e5             	lea    -0x1b(%ebp),%eaxfe62280,87064
     fe9:	6a 01                	push   $0x1fe92281,87120
     feb:	e9 21 ff ff ff       	jmp    f11 <printf+0xb1>feb2282,87164
     ff0:	8b 7d d4             	mov    -0x2c(%ebp),%ediff02284,87244
     ff3:	83 ec 04             	sub    $0x4,%espff32286,87320
     ff6:	8b 07                	mov    (%edi),%eaxff62288,87392
     ff8:	6a 01                	push   $0x1ff82290,87463
     ffa:	83 c7 04             	add    $0x4,%ediffa2292,87521
     ffd:	88 45 e4             	mov    %al,-0x1c(%ebp)ffd2294,87593
      state = 0;state2303,87988
          s = "(null)";s2306,88111
static Header base;static2317,88525
static Header *freep;static2318,88545
voidvoid2320,88568
  bp = (Header*)ap - 1;bp2326,88653
  bp = (Header*)ap - 1;bp2335,89024
  freep = p;freep2368,90443
  freep = p;freep2400,91878
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits2431,92814
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits2435,93008
  p = sbrk(nu * sizeof(Header));p2454,93867
      freep = prevp;freep2467,94441
  p = sbrk(nu * sizeof(Header));p2474,94674
      freep = prevp;freep2518,96439

spinlock.h,275
struct spinlock {spinlock2,26
  uint locked;       // Is the lock held?locked3,44
  char *name;        // Name of lock.name6,107
  struct cpu *cpu;   // The cpu holding the lock.cpu7,145
  uint pcs[10];      // The call stack (an array of program counters)pcs8,195

sleeplock.h,261
struct sleeplock {sleeplock2,33
  uint locked;       // Is the lock held?locked3,52
  struct spinlock lk; // spinlock protecting this sleep locklk4,94
  char *name;        // Name of lock.name7,178
  int pid;           // Process holding lockpid8,216

user.h,0

initcode.S,74
start:start10,138
exit:exit18,272
init:init24,357
argv:argv29,425

date.h,175
struct rtcdate {rtcdate1,0
  uint second;second2,17
  uint minute;minute3,32
  uint hour;hour4,47
  uint day;day5,60
  uint month;month6,72
  uint year;year7,86

pr.pl,0

cuth,34
sub writefile($@){writefile5,26

grep.asm,5330
_grep:     file format elf32-i386_grep2,1
Disassembly of section .text:Disassembly5,37
intint11,92
   a:	55                   	push   %ebpa17,275
   b:	89 e5                	mov    %esp,%ebpb18,315
   d:	57                   	push   %edid19,360
   e:	56                   	push   %esie20,400
   f:	53                   	push   %ebxf21,440
  pattern = argv[1];pattern35,873
  pattern = argv[1];pattern47,1165
  a1:	6a 02                	push   $0x2a1104,3354
  a3:	e8 28 06 00 00       	call   6d0 <printf>a3105,3394
  a8:	e8 d5 04 00 00       	call   582 <exit>a8107,3454
  ad:	66 90                	xchg   %ax,%axad108,3500
  af:	90                   	nopaf109,3543
int matchstar(int c, char *re, char *text)int116,3664
  b0:	55                   	push   %ebpb0118,3709
  b1:	89 e5                	mov    %esp,%ebpb1119,3749
  b3:	57                   	push   %edib3120,3794
  b4:	56                   	push   %esib4121,3834
  b5:	53                   	push   %ebxb5122,3874
  b6:	83 ec 0c             	sub    $0xc,%espb6123,3914
  b9:	8b 5d 08             	mov    0x8(%ebp),%ebxb9124,3959
  bc:	8b 75 0c             	mov    0xc(%ebp),%esibc125,4009
  bf:	8b 7d 10             	mov    0x10(%ebp),%edibf126,4059
  c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esic2127,4110
  c8:	83 ec 08             	sub    $0x8,%espc8130,4233
  cb:	57                   	push   %edicb131,4278
  cc:	56                   	push   %esicc132,4318
  cd:	e8 3e 00 00 00       	call   110 <matchhere>cd133,4358
  d2:	83 c4 10             	add    $0x10,%espd2134,4409
  d5:	85 c0                	test   %eax,%eaxd5135,4455
  d7:	75 1f                	jne    f8 <matchstar+0x48>d7136,4500
  d9:	0f be 17             	movsbl (%edi),%edxd9139,4620
  dc:	84 d2                	test   %dl,%dldc140,4667
  de:	74 0c                	je     ec <matchstar+0x3c>de141,4710
  e0:	83 c7 01             	add    $0x1,%edie0142,4765
  e3:	39 da                	cmp    %ebx,%edxe3143,4810
  e5:	74 e1                	je     c8 <matchstar+0x18>e5144,4855
  e7:	83 fb 2e             	cmp    $0x2e,%ebxe7145,4910
  ea:	74 dc                	je     c8 <matchstar+0x18>ea146,4956
  ec:	8d 65 f4             	lea    -0xc(%ebp),%espec149,5025
  ef:	5b                   	pop    %ebxef150,5076
  f0:	5e                   	pop    %esif0151,5116
  f1:	5f                   	pop    %edif1152,5156
  f2:	5d                   	pop    %ebpf2153,5196
  f3:	c3                   	ret    f3154,5236
  f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esif4155,5272
  f8:	8d 65 f4             	lea    -0xc(%ebp),%espf8156,5329
  fb:	b8 01 00 00 00       	mov    $0x1,%eaxfb158,5396
  m = 0;m344,12604
    p = buf;p364,13407
      p = q+1;p392,14584
      p = q+1;p405,15093
      m = 0;m436,16326
  os = s;os467,17291
intint488,17976
uintuint535,19685
static inline voidstatic577,20908
    cc = read(0, &c, 1);cc655,23470
intint717,25713
  fd = open(n, O_RDONLY);fd727,25941
  r = fstat(fd, st);r737,26313
  r = fstat(fd, st);r745,26616
intint767,27343
  n = 0;n776,27554
  n = 0;n781,27738
    n = n*10 + *s++ - '0';n787,27982
  dst = vdst;dst819,29036
  src = vsrc;src820,29050
  name: \name841,29762
static voidstatic982,33427
  neg = 0;neg995,33777
    neg = 1;neg1000,33908
    x = -xx;x1001,33921
    x = -xx;x1007,34160
    neg = 1;neg1009,34213
    x = xx;x1012,34289
  i = 0;i1015,34306
  neg = 0;neg1067,36390
voidvoid1088,37052
  state = 0;state1100,37379
  ap = (uint*)(void*)&fmt + 1;ap1101,37392
  ap = (uint*)(void*)&fmt + 1;ap1107,37643
  state = 0;state1110,37770
  ap = (uint*)(void*)&fmt + 1;ap1112,37828
    c = fmt[i] & 0xff;c1116,38021
    c = fmt[i] & 0xff;c1137,38853
        state = '%';state1142,39037
          s = "(null)";s1163,39757
      state = 0;state1196,40932
        state = '%';state1217,41637
      state = 0;state1232,42276
        s = (char*)*ap;s1239,42559
      state = 0;state1250,42982
        s = (char*)*ap;s1252,43044
      state = 0;state1278,44111
      state = 0;state1314,45498
          s = "(null)";s1317,45613
static Header base;static1328,45998
static Header *freep;static1329,46018
voidvoid1331,46041
  bp = (Header*)ap - 1;bp1337,46122
  bp = (Header*)ap - 1;bp1346,46468
  freep = p;freep1379,47806
  freep = p;freep1411,49140
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1442,50011
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1446,50196
  p = sbrk(nu * sizeof(Header));p1465,51005
      freep = prevp;freep1478,51545
  p = sbrk(nu * sizeof(Header));p1485,51764
      freep = prevp;freep1529,53408
 a01:	0e 00 00 a011547,54041
 a04:	b8 04 0e 00 00       	mov    $0xe04,%eaxa041549,54078
 a09:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08a091550,54125
 a10:	00 00 00 a101551,54171
 a13:	e9 44 ff ff ff       	jmp    95c <malloc+0x2c>a131552,54187
 a18:	90                   	nopa181553,54240
 a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esia191554,54272
 a20:	8b 08                	mov    (%eax),%ecxa201556,54362
 a22:	89 0a                	mov    %ecx,(%edx)a221557,54409
 a24:	eb b1                	jmp    9d7 <malloc+0xa7>a241558,54456

echo.c,39
main(int argc, char *argv[])main6,60

printpcs,0

lapic.c,1702
#define ID ID14,340
#define VER VER15,375
#define TPR TPR16,415
#define EOI EOI17,461
#define SVR SVR18,497
  #define ENABLE ENABLE19,555
#define ESR ESR20,604
#define ICRLO ICRLO21,649
  #define INIT INIT22,699
  #define STARTUP STARTUP23,747
  #define DELIVS DELIVS24,796
  #define ASSERT ASSERT25,849
  #define DEASSERT DEASSERT26,917
  #define LEVEL LEVEL27,949
  #define BCAST BCAST28,1002
  #define BUSY BUSY29,1074
  #define FIXED FIXED30,1106
#define ICRHI ICRHI31,1138
#define TIMER TIMER32,1196
  #define X1 X133,1257
  #define PERIODIC PERIODIC34,1313
#define PCINT PCINT35,1359
#define LINT0 LINT036,1415
#define LINT1 LINT137,1476
#define ERROR ERROR38,1537
  #define MASKED MASKED39,1598
#define TICR TICR40,1652
#define TCCR TCCR41,1704
#define TDCR TDCR42,1756
volatile uint *lapic;  // Initialized in mp.clapic44,1816
lapicw(int index, int value)lapicw48,1888
lapicinit(void)lapicinit55,2005
lapicid(void)lapicid101,3215
lapiceoi(void)lapiceoi110,3319
microdelay(int us)microdelay119,3477
#define CMOS_PORT CMOS_PORT123,3501
#define CMOS_RETURN CMOS_RETURN124,3527
lapicstartap(uchar apicid, uint addr)lapicstartap129,3668
#define CMOS_STATA CMOS_STATA163,4823
#define CMOS_STATB CMOS_STATB164,4849
#define CMOS_UIP CMOS_UIP165,4875
#define SECS SECS167,4938
#define MINS MINS168,4959
#define HOURS HOURS169,4980
#define DAY DAY170,5001
#define MONTH MONTH171,5022
#define YEAR YEAR172,5043
cmos_read(uint reg)cmos_read175,5077
fill_rtcdate(struct rtcdate *r)fill_rtcdate184,5186
cmostime(struct rtcdate *r)cmostime196,5479
#define    CONV(CONV217,5871
#undef     CONVCONV224,6045

trap.c,201
struct gatedesc idt[256];idt12,225
struct spinlock tickslock;tickslock14,320
uint ticks;ticks15,347
tvinit(void)tvinit18,365
idtinit(void)idtinit30,585
trap(struct trapframe *tf)trap37,651

sysproc.c,258
sys_fork(void)sys_fork11,154
sys_exit(void)sys_exit17,195
sys_wait(void)sys_wait24,257
sys_kill(void)sys_kill30,298
sys_getpid(void)sys_getpid40,395
sys_sbrk(void)sys_sbrk46,445
sys_sleep(void)sys_sleep60,605
sys_uptime(void)sys_uptime83,981

runoff1,0

buf.h,380
struct buf {buf1,0
  int flags;flags2,13
  uint dev;dev3,26
  uint blockno;blockno4,38
  struct sleeplock lock;lock5,54
  uint refcnt;refcnt6,79
  struct buf *prev; // LRU cache listprev7,94
  struct buf *next;next8,132
  struct buf *qnext; // disk queueqnext9,152
  uchar data[BSIZE];data10,187
#define B_VALID B_VALID12,211
#define B_DIRTY B_DIRTY13,266

console.c,919
static int panicked = 0;panicked20,386
  struct spinlock lock;lock23,428
  int locking;locking24,452
} cons;cons25,467
printint(int xx, int base, int sign)printint28,488
cprintf(char *fmt, ...)cprintf55,902
panic(char *s)panic107,1773
#define BACKSPACE BACKSPACE127,2127
#define CRTPORT CRTPORT128,2151
static ushort *crt = (ushort*)P2V(0xb8000);  // CGA memorycrt129,2173
cgaputc(int c)cgaputc132,2245
consputc(int c)consputc166,2912
#define INPUT_BUF INPUT_BUF181,3098
  char buf[INPUT_BUF];buf183,3129
  uint r;  // Read indexr184,3152
  uint w;  // Write indexw185,3177
  uint e;  // Edit indexe186,3203
} input;input187,3228
#define C(C189,3238
consoleintr(int (*getc)(void))consoleintr192,3282
consoleread(struct inode *ip, char *dst, int n)consoleread236,4321
consolewrite(struct inode *ip, char *buf, int n)consolewrite274,4990
consoleinit(void)consoleinit289,5200

echo.asm,4504
_echo:     file format elf32-i386_echo2,1
Disassembly of section .text:Disassembly5,37
intint11,122
   a:	55                   	push   %ebpa17,305
   b:	89 e5                	mov    %esp,%ebpb18,345
   d:	56                   	push   %esid19,390
   e:	53                   	push   %ebxe20,430
   f:	51                   	push   %ecxf21,470
  os = s;os76,2475
intint97,3159
  a0:	55                   	push   %ebpa0100,3202
  a1:	89 e5                	mov    %esp,%ebpa1101,3242
  a3:	53                   	push   %ebxa3102,3287
  a4:	8b 55 08             	mov    0x8(%ebp),%edxa4103,3327
  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecxa7104,3377
  aa:	0f b6 02             	movzbl (%edx),%eaxaa106,3451
  ad:	0f b6 19             	movzbl (%ecx),%ebxad107,3498
  b0:	84 c0                	test   %al,%alb0108,3545
  b2:	75 1c                	jne    d0 <strcmp+0x30>b2109,3588
  b4:	eb 2a                	jmp    e0 <strcmp+0x40>b4110,3640
  b6:	8d 76 00             	lea    0x0(%esi),%esib6111,3692
  b9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edib9112,3742
  c0:	83 c2 01             	add    $0x1,%edxc0114,3813
  c3:	0f b6 02             	movzbl (%edx),%eaxc3116,3882
  c6:	83 c1 01             	add    $0x1,%ecxc6118,3943
  c9:	0f b6 19             	movzbl (%ecx),%ebxc9119,3988
  cc:	84 c0                	test   %al,%alcc121,4059
  ce:	74 10                	je     e0 <strcmp+0x40>ce122,4102
  d0:	38 d8                	cmp    %bl,%ald0123,4154
  d2:	74 ec                	je     c0 <strcmp+0x20>d2124,4197
  d4:	29 d8                	sub    %ebx,%eaxd4126,4281
  d6:	5b                   	pop    %ebxd6128,4328
  d7:	5d                   	pop    %ebpd7129,4368
  d8:	c3                   	ret    d8130,4408
  d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esid9131,4444
  e0:	31 c0                	xor    %eax,%eaxe0132,4501
  e2:	29 d8                	sub    %ebx,%eaxe2134,4578
  e4:	5b                   	pop    %ebxe4136,4625
  e5:	5d                   	pop    %ebpe5137,4665
  e6:	c3                   	ret    e6138,4705
  e7:	89 f6                	mov    %esi,%esie7139,4741
  e9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edie9140,4786
uintuint144,4864
  f0:	55                   	push   %ebpf0147,4893
  f1:	89 e5                	mov    %esp,%ebpf1148,4933
  f3:	8b 4d 08             	mov    0x8(%ebp),%ecxf3149,4978
  f6:	80 39 00             	cmpb   $0x0,(%ecx)f6153,5062
  f9:	74 15                	je     110 <strlen+0x20>f9154,5109
  fb:	31 d2                	xor    %edx,%edxfb155,5162
  fd:	8d 76 00             	lea    0x0(%esi),%esifd156,5207
static inline voidstatic186,6087
    cc = read(0, &c, 1);cc264,8649
intint326,10892
  fd = open(n, O_RDONLY);fd336,11120
  r = fstat(fd, st);r346,11492
  r = fstat(fd, st);r354,11795
intint376,12522
  n = 0;n385,12733
  n = 0;n390,12917
    n = n*10 + *s++ - '0';n396,13161
  dst = vdst;dst428,14215
  src = vsrc;src429,14229
  name: \name450,14941
static voidstatic591,18606
  neg = 0;neg604,18956
    neg = 1;neg609,19087
    x = -xx;x610,19100
    x = -xx;x616,19339
    neg = 1;neg618,19392
    x = xx;x621,19468
  i = 0;i624,19485
  neg = 0;neg676,21569
voidvoid697,22231
  state = 0;state709,22558
  ap = (uint*)(void*)&fmt + 1;ap710,22571
  ap = (uint*)(void*)&fmt + 1;ap716,22822
  state = 0;state719,22949
  ap = (uint*)(void*)&fmt + 1;ap721,23007
    c = fmt[i] & 0xff;c725,23200
    c = fmt[i] & 0xff;c746,24032
        state = '%';state751,24216
          s = "(null)";s772,24936
      state = 0;state805,26111
        state = '%';state826,26816
      state = 0;state841,27455
        s = (char*)*ap;s848,27738
      state = 0;state859,28161
        s = (char*)*ap;s861,28223
      state = 0;state887,29290
      state = 0;state923,30677
          s = "(null)";s926,30792
static Header base;static937,31177
static Header *freep;static938,31197
voidvoid940,31220
  bp = (Header*)ap - 1;bp946,31301
  bp = (Header*)ap - 1;bp955,31647
  freep = p;freep988,32985
  freep = p;freep1020,34319
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1051,35190
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1055,35375
  p = sbrk(nu * sizeof(Header));p1074,36184
      freep = prevp;freep1087,36724
  p = sbrk(nu * sizeof(Header));p1094,36943
      freep = prevp;freep1138,38587

mkdir.c,39
main(int argc, char *argv[])main6,60

exec.c,42
exec(char *path, char **argv)exec11,153

swtch.S,20
swtch:swtch10,256

fs.h,1336
#define ROOTINO ROOTINO5,92
#define BSIZE BSIZE6,128
struct superblock {superblock14,420
  uint size;         // Size of file system image (blocks)size15,440
  uint nblocks;      // Number of data blocksnblocks16,499
  uint ninodes;      // Number of inodes.ninodes17,545
  uint nlog;         // Number of log blocksnlog18,587
  uint logstart;     // Block number of first log blocklogstart19,632
  uint inodestart;   // Block number of first inode blockinodestart20,688
  uint bmapstart;    // Block number of first free map blockbmapstart21,746
#define NDIRECT NDIRECT24,811
#define NINDIRECT NINDIRECT25,830
#define MAXFILE MAXFILE26,871
struct dinode {dinode29,937
  short type;           // File typetype30,953
  short major;          // Major device number (T_DEV only)major31,990
  short minor;          // Minor device number (T_DEV only)minor32,1050
  short nlink;          // Number of links to inode in file systemnlink33,1110
  uint size;            // Size of file (bytes)size34,1177
  uint addrs[NDIRECT+1];   // Data block addressesaddrs35,1225
#define IPB IPB39,1301
#define IBLOCK(IBLOCK42,1384
#define BPB BPB45,1464
#define BBLOCK(BBLOCK48,1545
#define DIRSIZ DIRSIZ51,1658
struct dirent {dirent53,1677
  ushort inum;inum54,1693
  char name[DIRSIZ];name55,1708

kernel.asm,21363
kernel:     file format elf32-i386kernel2,1
Disassembly of section .text:Disassembly5,38
entry:entry17,381
voidvoid61,1852
  b = bget(dev, blockno);b197,7793
voidvoid225,8824
voidvoid261,10150
intint340,13127
  target = n;target357,13706
    c = input.buf[input.r++ % INPUT_BUF];c418,16195
static inline voidstatic494,19281
  panicked = 1; // freeze other CPUpanicked536,21040
  pos = inb(CRTPORT+1) << 8;pos576,22836
    x = xx;x705,28810
  i = 0;i707,28878
    x = -xx;x748,30718
intint756,30974
  locking = cons.locking;locking816,33330
  locking = cons.locking;locking820,33474
  argp = (uint*)(void*)(&fmt + 1);argp831,33962
  argp = (uint*)(void*)(&fmt + 1);argp835,34145
    c = fmt[++i] & 0xff;c843,34566
        s = "(null)";s968,40461
        c = (c == '\r') ? '\n' : c;c1064,44873
        c = (c == '\r') ? '\n' : c;c1068,45059
      doprocdump = 1;doprocdump1096,46496
voidvoid1146,48890
intint1193,50485
  struct proc *curproc = myproc();struct1207,50927
  pgdir = 0;pgdir1230,51769
 bad:bad1244,52315
  sz = 0;sz1275,53493
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp1407,60018
    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;sp1416,60473
  oldpgdir = curproc->pgdir;oldpgdir1497,64407
voidvoid1536,66011
voidvoid1666,70596
  ff = *f;ff1708,72157
  ff = *f;ff1713,72347
  ff = *f;ff1717,72484
  ff = *f;ff1722,72681
intint1776,74904
intint1820,76552
intint1903,79874
        n1 = max;n11947,81654
static voidstatic2067,86393
  bp = bread(dev, BBLOCK(b, sb));bp2078,86692
  bi = b % BPB;bi2085,87023
  m = 1 << (bi % 8);m2086,87039
  m = 1 << (bi % 8);m2090,87190
  m = 1 << (bi % 8);m2096,87442
    bp = bread(dev, BBLOCK(b, sb));bp2146,89481
      m = 1 << (bi % 8);m2163,90361
      m = 1 << (bi % 8);m2167,90547
  bp = bread(dev, bno);bp2213,92803
static struct inode*static2248,94280
  empty = 0;empty2262,94692
      empty = ip;empty2300,96523
  ip = empty;ip2307,96707
static uintstatic2372,99115
    bp = bread(ip->dev, addr);bp2417,100820
    bp = bread(ip->dev, addr);bp2425,101185
  bp = bread(dev, 1);bp2508,104729
    bp = bread(dev, IBLOCK(inum, sb));bp2611,109299
    dip = (struct dinode*)bp->data + inum%IPB;dip2620,109733
    dip = (struct dinode*)bp->data + inum%IPB;dip2624,109920
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp2675,112117
  bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp2680,112368
  dip = (struct dinode*)bp->data + ip->inum%IPB;dip2687,112717
  dip = (struct dinode*)bp->data + ip->inum%IPB;dip2693,113003
    bp = bread(ip->dev, IBLOCK(ip->inum, sb));bp2788,116984
    dip = (struct dinode*)bp->data + ip->inum%IPB;dip2797,117433
    dip = (struct dinode*)bp->data + ip->inum%IPB;dip2801,117642
    bp = bread(ip->dev, ip->addrs[NDIRECT]);bp3009,126423
    a = (uint*)bp->data;a3017,126831
voidvoid3076,129229
intint3108,130398
    n = ip->size - off;n3148,131971
    n = ip->size - off;n3157,132335
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp3163,132636
    m = min(n - tot, BSIZE - off%BSIZE);m3173,133135
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp3175,133232
    m = min(n - tot, BSIZE - off%BSIZE);m3177,133327
    m = min(n - tot, BSIZE - off%BSIZE);m3186,133778
intint3248,136479
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp3299,138537
    m = min(n - tot, BSIZE - off%BSIZE);m3309,139036
    bp = bread(ip->dev, bmap(ip, off/BSIZE));bp3312,139189
    m = min(n - tot, BSIZE - off%BSIZE);m3314,139284
    m = min(n - tot, BSIZE - off%BSIZE);m3322,139679
intint3405,143188
      inum = de.inum;inum3505,147166
static struct inode*static3531,148310
    ip = iget(ROOTDEV, ROOTINO);ip3550,148991
    ip = idup(myproc()->cwd);ip3552,149031
    ip = idup(myproc()->cwd);ip3556,149192
    ip = next;ip3691,155087
    ip = iget(ROOTDEV, ROOTINO);ip3730,156469
static voidstatic3902,163496
      havedisk1 = 1;havedisk14051,170176
voidvoid4079,171136
  idequeue = b->qnext;idequeue4103,171912
voidvoid4176,174969
voidvoid4299,180070
  ioapic = (volatile struct ioapic*)IOAPIC;ioapic4305,180161
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;maxintr4322,180805
  id = ioapicread(REG_ID) >> 24;id4323,180853
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;maxintr4326,180962
  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;maxintr4330,181138
  id = ioapicread(REG_ID) >> 24;id4332,181234
voidvoid4387,183517
voidvoid4435,185405
  r = (struct run*)v;r4469,186738
  p = (char*)PGROUNDUP((uint)vstart);p4512,188371
  p = (char*)PGROUNDUP((uint)vstart);p4516,188519
  p = (char*)PGROUNDUP((uint)vstart);p4557,190316
  p = (char*)PGROUNDUP((uint)vstart);p4564,190602
  p = (char*)PGROUNDUP((uint)vstart);p4598,192054
  p = (char*)PGROUNDUP((uint)vstart);p4602,192202
  r = kmem.freelist;r4645,193885
  r = kmem.freelist;r4669,194793
  st = inb(KBSTATP);st4704,196116
  data = inb(KBDATAP);data4711,196388
    data = (shift & E0ESC ? data : data & 0x7F);data4730,197076
  c = charcode[shift & (CTL | SHIFT)][data];c4751,197874
  c = charcode[shift & (CTL | SHIFT)][data];c4755,198052
  c = charcode[shift & (CTL | SHIFT)][data];c4759,198219
    data = (shift & E0ESC ? data : data & 0x7F);data4779,198993
voidvoid4830,200937
voidvoid4853,201667
intint4969,206235
voidvoid4994,206984
voidvoid5021,207830
voidvoid5036,208293
  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vectorwrv5055,209154
voidvoid5126,212004
  bcd = (sb & (1 << 2)) == 0;bcd5201,215684
#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))CONV5300,220330
static voidstatic5380,224016
static voidstatic5456,227329
static voidstatic5567,232004
voidvoid5590,232737
voidvoid5647,234988
static voidstatic5693,236587
voidvoid5799,241303
static voidstatic5890,245195
  code = P2V(0x7000);code5984,249149
    stack = kalloc();stack6011,250450
static struct mp*static6059,252494
  addr = P2V(a);addr6068,252746
  e = addr+len;e6072,252871
voidvoid6135,255548
    p = ((bda[0x14]<<8)|bda[0x13])*1024;p6152,256257
  conf = (struct mpconf*) P2V((uint) mp->physaddr);conf6171,257230
  sum = 0;sum6197,258522
  ismp = 1;ismp6220,259414
  lapic = (uint*)conf->lapicaddr;lapic6221,259426
  ismp = 1;ismp6227,259764
    default:default6250,260740
      ismp = 0;ismp6251,260753
      ioapicid = ioapic->apicno;ioapicid6304,263051
      ioapicid = ioapic->apicno;ioapicid6308,263223
      ismp = 0;ismp6332,264400
#define IO_PIC2         0xA0    // Slave (IRQs 8-15)IO_PIC26345,264913
voidvoid6348,265040
intint6374,265875
  p = 0;p6387,266328
 bad:bad6408,267256
voidvoid6516,271349
intint6599,274537
intint6723,280185
static struct proc*static6844,285565
  struct proc *p;struct6850,285740
found:found6877,286761
  sp = p->kstack + KSTACKSIZE;sp6905,287740
voidvoid6970,290084
    first = 0;first6998,290990
  apicid = lapicid();apicid7041,292603
  c = mycpu();c7112,295602
  p = c->proc;p7114,295673
  p = allocproc();p7133,296358
  initproc = p;initproc7136,296486
  c = mycpu();c7225,300550
  p = c->proc;p7227,300621
  sz = curproc->sz;sz7233,300822
  c = mycpu();c7294,303466
  p = c->proc;p7296,303537
  pid = np->pid;pid7365,306876
  c = mycpu();c7479,311662
  p = c->proc;p7481,311733
  intena = mycpu()->intena;intena7505,312826
  intena = mycpu()->intena;intena7509,313002
  c = mycpu();c7570,315461
  p = c->proc;p7572,315532
static voidstatic7612,317291
  struct proc *p;struct7615,317325
  c = mycpu();c7694,321036
  p = c->proc;p7696,321107
  c = mycpu();c7727,322314
  p = c->proc;p7729,322385
  c = mycpu();c7804,325378
  p = c->proc;p7806,325449
    havekids = 0;havekids7815,325821
      havekids = 1;havekids7833,326719
    havekids = 0;havekids7849,327524
        pid = p->pid;pid7856,327837
voidvoid7906,329728
intint7951,331682
  struct proc *p;struct7959,331943
voidvoid8018,334273
  struct proc *p;struct8028,334585
      state = "???";state8059,335878
      state = "???";state8064,336154
voidvoid8120,338648
voidvoid8153,339818
voidvoid8203,341830
intint8237,343065
  r = lk->locked && (lk->pid == myproc()->pid);r8254,343672
voidvoid8288,345048
voidvoid8312,345811
  ebp = (uint*)v - 2;ebp8319,345919
  ebp = (uint*)v - 2;ebp8325,346112
  ebp = (uint*)v - 2;ebp8329,346244
    ebp = (uint*)ebp[0]; // saved %ebpebp8342,346847
voidvoid8373,347989
  eflags = readeflags();eflags8386,348358
voidvoid8409,349234
  r = lock->locked && lock->cpu == mycpu();r8467,351563
  ebp = (uint*)v - 2;ebp8521,353937
    ebp = (uint*)ebp[0]; // saved %ebpebp8533,354547
intint8678,360254
  s1 = v1;s18691,360720
  s2 = v2;s28692,360731
  s = src;s8757,363049
  d = dst;d8758,363060
intint8828,365595
  os = s;os8903,368585
  os = s;os8957,370745
intint8988,371939
swtch:swtch9017,372805
intint9055,373825
  struct proc *curproc = myproc();struct9063,374100
intint9097,375557
  struct proc *curproc = myproc();struct9106,375850
  ep = (char*)curproc->sz;ep9117,376274
intint9163,378159
  struct proc *curproc = myproc();struct9176,378702
intint9211,380291
  struct proc *curproc = myproc();struct9221,380627
intint9268,382724
voidvoid9306,384060
  struct proc *curproc = myproc();struct9314,384278
  num = curproc->tf->eax;num9318,384420
static struct inode*static9366,386383
  struct proc *curproc = myproc();struct9634,397785
intint10196,422618
  struct proc *curproc = myproc();struct10270,425315
    ip = create(path, T_FILE, 0, 0);ip10331,427751
    ip = create(path, T_FILE, 0, 0);ip10341,428208
intint10378,429810
intint10433,431808
intint10515,435002
  struct proc *curproc = myproc();struct10525,435289
intint10606,438541
intint10726,443334
  fd0 = -1;fd010762,444722
  struct proc *curproc = myproc();struct10767,444931
  struct proc *curproc = myproc();struct10785,445848
intint10849,448427
intint10863,448760
intint10880,449206
intint10894,449539
intint10931,450810
intint10946,451216
  addr = myproc()->sz;addr10967,451874
  addr = myproc()->sz;addr10971,452025
intint10995,452939
  ticks0 = ticks;ticks011020,453783
  ticks0 = ticks;ticks011024,453935
intint11087,456448
  xticks = ticks;xticks11099,456806
alltraps:alltraps11115,457296
trapret:trapret11148,458130
uint ticks;uint11168,458669
voidvoid11170,458682
voidvoid11222,460723
voidvoid11250,461664
  default:default11280,462679
static inline uintstatic11289,463071
static intstatic11518,473713
  uart = 1;uart11630,478500
voidvoid11699,481331
vector0:vector011718,481869
vector1:vector111728,482098
vector2:vector211738,482327
vector3:vector311748,482556
vector4:vector411758,482785
vector5:vector511768,483014
vector6:vector611778,483243
vector7:vector711788,483472
vector8:vector811798,483701
vector9:vector911806,483875
vector10:vector1011816,484106
vector11:vector1111824,484284
vector12:vector1211832,484462
vector13:vector1311840,484640
vector14:vector1411848,484818
vector15:vector1511856,484996
vector16:vector1611866,485229
vector17:vector1711876,485463
vector18:vector1811884,485642
vector19:vector1911894,485876
vector20:vector2011904,486110
vector21:vector2111914,486344
vector22:vector2211924,486578
vector23:vector2311934,486812
vector24:vector2411944,487046
vector25:vector2511954,487280
vector26:vector2611964,487514
vector27:vector2711974,487748
vector28:vector2811984,487982
vector29:vector2911994,488216
vector30:vector3012004,488450
vector31:vector3112014,488684
vector32:vector3212024,488918
vector33:vector3312034,489152
vector34:vector3412044,489386
vector35:vector3512054,489620
vector36:vector3612064,489854
vector37:vector3712074,490088
vector38:vector3812084,490322
vector39:vector3912094,490556
vector40:vector4012104,490790
vector41:vector4112114,491024
vector42:vector4212124,491258
vector43:vector4312134,491492
vector44:vector4412144,491726
vector45:vector4512154,491960
vector46:vector4612164,492194
vector47:vector4712174,492428
vector48:vector4812184,492662
vector49:vector4912194,492896
vector50:vector5012204,493130
vector51:vector5112214,493364
vector52:vector5212224,493598
vector53:vector5312234,493832
vector54:vector5412244,494066
vector55:vector5512254,494300
vector56:vector5612264,494534
vector57:vector5712274,494768
vector58:vector5812284,495002
vector59:vector5912294,495236
vector60:vector6012304,495470
vector61:vector6112314,495704
vector62:vector6212324,495938
vector63:vector6312334,496172
vector64:vector6412344,496406
vector65:vector6512354,496640
vector66:vector6612364,496874
vector67:vector6712374,497108
vector68:vector6812384,497342
vector69:vector6912394,497576
vector70:vector7012404,497810
vector71:vector7112414,498044
vector72:vector7212424,498278
vector73:vector7312434,498512
vector74:vector7412444,498746
vector75:vector7512454,498980
vector76:vector7612464,499214
vector77:vector7712474,499448
vector78:vector7812484,499682
vector79:vector7912494,499916
vector80:vector8012504,500150
vector81:vector8112514,500384
vector82:vector8212524,500618
vector83:vector8312534,500852
vector84:vector8412544,501086
vector85:vector8512554,501320
vector86:vector8612564,501554
vector87:vector8712574,501788
vector88:vector8812584,502022
vector89:vector8912594,502256
vector90:vector9012604,502490
vector91:vector9112614,502724
vector92:vector9212624,502958
vector93:vector9312634,503192
vector94:vector9412644,503426
vector95:vector9512654,503660
vector96:vector9612664,503894
vector97:vector9712674,504128
vector98:vector9812684,504362
vector99:vector9912694,504596
vector100:vector10012704,504832
vector101:vector10112714,505070
vector102:vector10212724,505308
vector103:vector10312734,505546
vector104:vector10412744,505784
vector105:vector10512754,506022
vector106:vector10612764,506260
vector107:vector10712774,506498
vector108:vector10812784,506736
vector109:vector10912794,506974
vector110:vector11012804,507212
vector111:vector11112814,507450
vector112:vector11212824,507688
vector113:vector11312834,507926
vector114:vector11412844,508164
vector115:vector11512854,508402
vector116:vector11612864,508640
vector117:vector11712874,508878
vector118:vector11812884,509116
vector119:vector11912894,509354
vector120:vector12012904,509592
vector121:vector12112914,509830
vector122:vector12212924,510068
vector123:vector12312934,510306
vector124:vector12412944,510544
vector125:vector12512954,510782
vector126:vector12612964,511020
vector127:vector12712974,511258
vector128:vector12812984,511496
vector129:vector12912994,511734
vector130:vector13013004,511972
vector131:vector13113014,512210
vector132:vector13213024,512448
vector133:vector13313034,512686
vector134:vector13413044,512924
vector135:vector13513054,513162
vector136:vector13613064,513400
vector137:vector13713074,513638
vector138:vector13813084,513876
vector139:vector13913094,514114
vector140:vector14013104,514352
vector141:vector14113114,514590
vector142:vector14213124,514828
vector143:vector14313134,515066
vector144:vector14413144,515304
vector145:vector14513154,515542
vector146:vector14613164,515780
vector147:vector14713174,516018
vector148:vector14813184,516256
vector149:vector14913194,516494
vector150:vector15013204,516732
vector151:vector15113214,516970
vector152:vector15213224,517208
vector153:vector15313234,517446
vector154:vector15413244,517684
vector155:vector15513254,517922
vector156:vector15613264,518160
vector157:vector15713274,518398
vector158:vector15813284,518636
vector159:vector15913294,518874
vector160:vector16013304,519112
vector161:vector16113314,519350
vector162:vector16213324,519588
vector163:vector16313334,519826
vector164:vector16413344,520064
vector165:vector16513354,520302
vector166:vector16613364,520540
vector167:vector16713374,520778
vector168:vector16813384,521016
vector169:vector16913394,521254
vector170:vector17013404,521492
vector171:vector17113414,521730
vector172:vector17213424,521968
vector173:vector17313434,522206
vector174:vector17413444,522444
vector175:vector17513454,522682
vector176:vector17613464,522920
vector177:vector17713474,523158
vector178:vector17813484,523396
vector179:vector17913494,523634
vector180:vector18013504,523872
vector181:vector18113514,524110
vector182:vector18213524,524348
vector183:vector18313534,524586
vector184:vector18413544,524824
vector185:vector18513554,525062
vector186:vector18613564,525300
vector187:vector18713574,525538
vector188:vector18813584,525776
vector189:vector18913594,526014
vector190:vector19013604,526252
vector191:vector19113614,526490
vector192:vector19213624,526728
vector193:vector19313634,526966
vector194:vector19413644,527204
vector195:vector19513654,527442
vector196:vector19613664,527680
vector197:vector19713674,527918
vector198:vector19813684,528156
vector199:vector19913694,528394
vector200:vector20013704,528632
vector201:vector20113714,528870
vector202:vector20213724,529108
vector203:vector20313734,529346
vector204:vector20413744,529584
vector205:vector20513754,529822
vector206:vector20613764,530060
vector207:vector20713774,530298
vector208:vector20813784,530536
vector209:vector20913794,530774
vector210:vector21013804,531012
vector211:vector21113814,531250
vector212:vector21213824,531488
vector213:vector21313834,531726
vector214:vector21413844,531964
vector215:vector21513854,532202
vector216:vector21613864,532440
vector217:vector21713874,532678
vector218:vector21813884,532916
vector219:vector21913894,533154
vector220:vector22013904,533392
vector221:vector22113914,533630
vector222:vector22213924,533868
vector223:vector22313934,534106
vector224:vector22413944,534344
vector225:vector22513954,534582
vector226:vector22613964,534820
vector227:vector22713974,535058
vector228:vector22813984,535296
vector229:vector22913994,535534
vector230:vector23014004,535772
vector231:vector23114014,536010
vector232:vector23214024,536248
vector233:vector23314034,536486
vector234:vector23414044,536724
vector235:vector23514054,536962
vector236:vector23614064,537200
vector237:vector23714074,537438
vector238:vector23814084,537676
vector239:vector23914094,537914
vector240:vector24014104,538152
vector241:vector24114114,538390
vector242:vector24214124,538628
vector243:vector24314134,538866
vector244:vector24414144,539104
vector245:vector24514154,539342
vector246:vector24614164,539580
vector247:vector24714174,539818
vector248:vector24814184,540056
vector249:vector24914194,540294
vector250:vector25014204,540532
vector251:vector25114214,540770
vector252:vector25214224,541008
vector253:vector25314234,541246
vector254:vector25414244,541484
vector255:vector25514254,541722
static pte_t *static14271,542318
  pde = &pgdir[PDX(va)];pde14282,542642
  pde = &pgdir[PDX(va)];pde14286,542767
    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));pgtab14295,543135
static intstatic14354,545668
  a = (char*)PGROUNDDOWN((uint)va);a14365,546002
  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);last14371,546251
intint14445,549299
  a = PGROUNDUP(newsz);a14457,549632
  a = PGROUNDUP(newsz);a14461,549810
    pte = walkpgdir(pgdir, (char*)a, 0);pte14472,550377
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;a14474,550431
      pa = PTE_ADDR(*pte);pa14479,550682
    pte = walkpgdir(pgdir, (char*)a, 0);pte14501,551604
      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;a14509,551987
  c = &cpus[cpuid()];c14538,553112
static inline voidstatic14590,555274
  mem = kalloc();mem14711,560653
  mem = kalloc();mem14715,560803
    pa = PTE_ADDR(*pte);pa14782,563934
    pa = PTE_ADDR(*pte);pa14788,564186
  a = PGROUNDUP(oldsz);a14850,566821
    mem = kalloc();mem14884,568545
    mem = kalloc();mem14888,568689
voidvoid15011,573834
  kpgdir = setupkvm();kpgdir15150,579698
voidvoid15165,580247
  pte = walkpgdir(pgdir, uva, 0);pte15171,580348
  pte = walkpgdir(pgdir, uva, 0);pte15176,580531
    pa = PTE_ADDR(*pte);pa15228,582480
    flags = PTE_FLAGS(*pte);flags15229,582505
    pa = PTE_ADDR(*pte);pa15267,584371
    flags = PTE_FLAGS(*pte);flags15269,584445
    pa = PTE_ADDR(*pte);pa15271,584525
    flags = PTE_FLAGS(*pte);flags15273,584606
  return d;return15282,584949
bad:bad15284,584962
  pte = walkpgdir(pgdir, uva, 0);pte15328,586553
  pte = walkpgdir(pgdir, uva, 0);pte15333,586736
intint15377,588393
  buf = (char*)p;buf15392,588923
    va0 = (uint)PGROUNDDOWN(va);va015399,589231
    pa0 = uva2ka(pgdir, (char*)va0);pa015400,589264
    n = PGSIZE - (va - va0);n15403,589335
      n = len;n15411,589684
    va = va0 + PGSIZE;va15426,590283
    va0 = (uint)PGROUNDDOWN(va);va015433,590556
    pa0 = uva2ka(pgdir, (char*)va0);pa015435,590638
    va0 = (uint)PGROUNDDOWN(va);va015437,590724
    pa0 = uva2ka(pgdir, (char*)va0);pa015440,590869

vectors.pl,0

log.c,798
struct logheader {logheader34,1129
  int n;n35,1148
  int block[LOGSIZE];block36,1157
struct log {log39,1183
  struct spinlock lock;lock40,1196
  int start;start41,1220
  int size;size42,1233
  int outstanding; // how many FS sys calls are executing.outstanding43,1245
  int committing;  // in commit(), please wait.committing44,1304
  int dev;dev45,1352
  struct logheader lh;lh46,1363
struct log log;log48,1389
initlog(int dev)initlog54,1470
install_trans(void)install_trans70,1806
read_head(void)read_head86,2255
write_head(void)write_head102,2623
recover_from_log(void)recover_from_log116,2897
begin_op(void)begin_op126,3099
end_op(void)end_op146,3560
write_log(void)write_log178,4226
commit()commit193,4572
log_write(struct buf *b)log_write214,5187

zombie.c,22
main(void)main9,124

ulib.c,400
strcpy(char *s, const char *t)strcpy8,98
strcmp(const char *p, const char *q)strcmp19,208
strlen(const char *s)strlen27,325
memset(void *dst, int c, uint n)memset37,410
strchr(const char *s, char c)strchr44,488
gets(char *buf, int max)gets53,597
stat(const char *n, struct stat *st)stat71,830
atoi(const char *s)atoi85,996
memmove(void *vdst, const void *vsrc, int n)memmove96,1117

uart.c,205
#define COM1 COM115,242
static int uart;    // is there a uart?uart17,265
uartinit(void)uartinit20,311
uartputc(int c)uartputc52,970
uartgetc(void)uartgetc64,1127
uartintr(void)uartintr74,1244

cat.c,86
char buf[512];buf5,56
cat(int fd)cat8,77
main(int argc, char *argv[])main25,317

file.h,1127
struct file {file1,0
  enum { FD_NONE, FD_PIPE, FD_INODE } type;FD_NONE2,14
  enum { FD_NONE, FD_PIPE, FD_INODE } type;FD_PIPE2,14
  enum { FD_NONE, FD_PIPE, FD_INODE } type;FD_INODE2,14
  enum { FD_NONE, FD_PIPE, FD_INODE } type;type2,14
  int ref; // reference countref3,58
  char readable;readable4,88
  char writable;writable5,105
  struct pipe *pipe;pipe6,122
  struct inode *ip;ip7,143
  uint off;off8,163
struct inode {inode13,210
  uint dev;           // Device numberdev14,225
  uint inum;          // Inode numberinum15,264
  int ref;            // Reference countref16,302
  struct sleeplock lock; // protects everything below herelock17,343
  int valid;          // inode has been read from disk?valid18,402
  short type;         // copy of disk inodetype20,459
  short major;major21,503
  short minor;minor22,518
  short nlink;nlink23,533
  uint size;size24,548
  uint addrs[NDIRECT+1];addrs25,561
struct devsw {devsw30,650
  int (*read)(struct inode*, char*, int);read31,665
  int (*write)(struct inode*, char*, int);write32,707
#define CONSOLE CONSOLE37,784

sysfile.c,654
argfd(int n, int *pfd, struct file **pf)argfd22,490
fdalloc(struct file *f)fdalloc41,854
sys_dup(void)sys_dup56,1070
sys_read(void)sys_read70,1231
sys_write(void)sys_write82,1408
sys_close(void)sys_close94,1587
sys_fstat(void)sys_fstat107,1739
sys_link(void)sys_link119,1970
isdirempty(struct inode *dp)isdirempty169,2711
sys_unlink(void)sys_unlink185,2998
create(char *path, short type, short major, short minor)create242,3911
sys_open(void)sys_open286,4790
sys_mkdir(void)sys_mkdir336,5618
sys_mknod(void)sys_mknod352,5836
sys_chdir(void)sys_chdir372,6149
sys_exec(void)sys_exec397,6521
sys_pipe(void)sys_pipe423,6979

forktest.c,122
#define N N8,161
printf(int fd, const char *s, ...)printf11,183
forktest(void)forktest17,255
main(void)main52,725

bootblock.asm,506
Disassembly of section .text:Disassembly5,43
start:start12,186
start32:start3282,2751
spin:spin119,4275
voidvoid144,4903
static inline ucharstatic149,5018
voidvoid170,5613
static inline voidstatic183,5980
voidvoid236,8092
  epa = pa + count;epa248,8492
  offset = (offset / SECTSIZE) + 1;offset259,8894
  ph = (struct proghdr*)((uchar*)elf + elf->phoff);ph312,11108
  eph = ph + elf->phnum;eph315,11270
    pa = (uchar*)ph->paddr;pa329,11882
static inline voidstatic347,12656

ide.c,648
#define SECTOR_SIZE SECTOR_SIZE16,277
#define IDE_BSY IDE_BSY17,303
#define IDE_DRDY IDE_DRDY18,330
#define IDE_DF IDE_DF19,357
#define IDE_ERR IDE_ERR20,384
#define IDE_CMD_READ IDE_CMD_READ22,412
#define IDE_CMD_WRITE IDE_CMD_WRITE23,439
#define IDE_CMD_RDMUL IDE_CMD_RDMUL24,466
#define IDE_CMD_WRMUL IDE_CMD_WRMUL25,493
static struct spinlock idelock;idelock31,698
static struct buf *idequeue;idequeue32,730
static int havedisk1;havedisk134,760
idewait(int checkerr)idewait39,867
ideinit(void)ideinit51,1049
idestart(struct buf *b)idestart74,1439
ideintr(void)ideintr104,2287
iderw(struct buf *b)iderw138,2972

proc.h,2340
struct cpu {cpu2,17
  uchar apicid;                // Local APIC IDapicid3,30
  struct context *scheduler;   // swtch() here to enter schedulerscheduler4,78
  struct taskstate ts;         // Used by x86 to find stack for interruptts5,144
  struct segdesc gdt[NSEGS];   // x86 global descriptor tablegdt6,218
  volatile uint started;       // Has the CPU started?started7,280
  int ncli;                    // Depth of pushcli nesting.ncli8,335
  int intena;                  // Were interrupts enabled before pushcli?intena9,395
  struct proc *proc;           // The process running on this cpu or nullproc10,469
struct context {context27,1195
  uint edi;edi28,1212
  uint esi;esi29,1224
  uint ebx;ebx30,1236
  uint ebp;ebp31,1248
  uint eip;eip32,1260
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };procstate35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };UNUSED35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };EMBRYO35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };SLEEPING35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };RUNNABLE35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };RUNNING35,1276
enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };ZOMBIE35,1276
struct proc {proc38,1370
  uint sz;                     // Size of process memory (bytes)sz39,1384
  pde_t* pgdir;                // Page tablepgdir40,1449
  char *kstack;                // Bottom of kernel stack for this processkstack41,1494
  enum procstate state;        // Process statestate42,1568
  int pid;                     // Process IDpid43,1616
  struct proc *parent;         // Parent processparent44,1661
  struct trapframe *tf;        // Trap frame for current syscalltf45,1710
  struct context *context;     // swtch() here to run processcontext46,1775
  void *chan;                  // If non-zero, sleeping on chanchan47,1837
  int killed;                  // If non-zero, have been killedkilled48,1901
  struct file *ofile[NOFILE];  // Open filesofile49,1965
  struct inode *cwd;           // Current directorycwd50,2010
  char name[16];               // Process name (debugging)name51,2062

x86.h,1436
inb(ushort port)inb4,77
insl(int port, void *addr, int cnt)insl13,203
outb(ushort port, uchar data)outb22,420
outw(ushort port, ushort data)outw28,530
outsl(int port, const void *addr, int cnt)outsl34,641
stosb(void *addr, int data, int cnt)stosb43,856
stosl(void *addr, int data, int cnt)stosl52,1075
lgdt(struct segdesc *p, int size)lgdt63,1311
lidt(struct gatedesc *p, int size)lidt77,1518
ltr(ushort sel)ltr89,1708
readeflags(void)readeflags95,1788
loadgs(ushort v)loadgs103,1912
cli(void)cli109,1998
sti(void)sti115,2055
xchg(volatile uint *addr, uint newval)xchg121,2112
rcr2(void)rcr2134,2399
lcr3(uint val)lcr3142,2506
struct trapframe {trapframe150,2695
  uint edi;edi152,2748
  uint esi;esi153,2760
  uint ebp;ebp154,2772
  uint oesp;      // useless & ignoredoesp155,2784
  uint ebx;ebx156,2823
  uint edx;edx157,2835
  uint ecx;ecx158,2847
  uint eax;eax159,2859
  ushort gs;gs162,2896
  ushort padding1;padding1163,2909
  ushort fs;fs164,2928
  ushort padding2;padding2165,2941
  ushort es;es166,2960
  ushort padding3;padding3167,2973
  ushort ds;ds168,2992
  ushort padding4;padding4169,3005
  uint trapno;trapno170,3024
  uint err;err173,3080
  uint eip;eip174,3092
  ushort cs;cs175,3104
  ushort padding5;padding5176,3117
  uint eflags;eflags177,3136
  uint esp;esp180,3222
  ushort ss;ss181,3234
  ushort padding6;padding6182,3247

syscall.c,304
fetchint(uint addr, int *ip)fetchint18,468
fetchstr(uint addr, char **pp)fetchstr32,827
argint(int n, int *ip)argint50,1138
argptr(int n, char **pp, int size)argptr59,1391
argstr(int n, char **pp)argstr77,1895
static int (*syscalls[])(void) = {syscalls107,2588
syscall(void)syscall132,3148

trapasm.S,48
alltraps:alltraps5,70
trapret:trapret25,378

cat.asm,4136
_cat:     file format elf32-i386_cat2,1
Disassembly of section .text:Disassembly5,36
intint11,91
   a:	55                   	push   %ebpa17,274
   b:	89 e5                	mov    %esp,%ebpb18,314
   d:	57                   	push   %edid19,359
   e:	56                   	push   %esie20,399
   f:	53                   	push   %ebxf21,439
  a0:	83 ec 04             	sub    $0x4,%espa0100,3173
  a3:	53                   	push   %ebxa3101,3218
  a4:	68 60 0b 00 00       	push   $0xb60a4102,3258
  a9:	6a 01                	push   $0x1a9103,3300
  ab:	e8 d2 02 00 00       	call   382 <write>ab104,3340
  b0:	83 c4 10             	add    $0x10,%espb0105,3387
  b3:	39 d8                	cmp    %ebx,%eaxb3106,3433
  b5:	75 26                	jne    dd <cat+0x4d>b5107,3478
  b7:	83 ec 04             	sub    $0x4,%espb7109,3575
  ba:	68 00 02 00 00       	push   $0x200ba110,3620
  bf:	68 60 0b 00 00       	push   $0xb60bf111,3662
  c4:	56                   	push   %esic4112,3704
  c5:	e8 b0 02 00 00       	call   37a <read>c5113,3744
  ca:	83 c4 10             	add    $0x10,%espca114,3790
  cd:	83 f8 00             	cmp    $0x0,%eaxcd115,3836
  d0:	89 c3                	mov    %eax,%ebxd0116,3881
  d2:	7f cc                	jg     a0 <cat+0x10>d2117,3926
  d4:	75 1b                	jne    f1 <cat+0x61>d4119,3988
  d6:	8d 65 f8             	lea    -0x8(%ebp),%espd6121,4039
  d9:	5b                   	pop    %ebxd9122,4090
  da:	5e                   	pop    %esida123,4130
  db:	5d                   	pop    %ebpdb124,4170
  dc:	c3                   	ret    dc125,4210
  dd:	83 ec 08             	sub    $0x8,%espdd127,4285
  e0:	68 08 08 00 00       	push   $0x808e0128,4330
  e5:	6a 01                	push   $0x1e5129,4372
  e7:	e8 c4 03 00 00       	call   4b0 <printf>e7130,4412
  ec:	e8 71 02 00 00       	call   362 <exit>ec132,4474
  f1:	50                   	push   %eaxf1134,4556
  f2:	50                   	push   %eaxf2135,4596
  f3:	68 1a 08 00 00       	push   $0x81af3136,4636
  f8:	6a 01                	push   $0x1f8137,4678
  fa:	e8 b1 03 00 00       	call   4b0 <printf>fa138,4718
  ff:	e8 5e 02 00 00       	call   362 <exit>ff140,4778
  os = s;os162,5415
intint183,6100
uintuint230,7809
static inline voidstatic272,9032
    cc = read(0, &c, 1);cc350,11594
intint412,13837
  fd = open(n, O_RDONLY);fd422,14065
  r = fstat(fd, st);r432,14437
  r = fstat(fd, st);r440,14740
intint462,15467
  n = 0;n471,15678
  n = 0;n476,15862
    n = n*10 + *s++ - '0';n482,16106
  dst = vdst;dst514,17160
  src = vsrc;src515,17174
  name: \name536,17886
static voidstatic677,21551
  neg = 0;neg690,21901
    neg = 1;neg695,22032
    x = -xx;x696,22045
    x = -xx;x702,22284
    neg = 1;neg704,22337
    x = xx;x707,22413
  i = 0;i710,22430
  neg = 0;neg762,24514
voidvoid783,25176
  state = 0;state795,25503
  ap = (uint*)(void*)&fmt + 1;ap796,25516
  ap = (uint*)(void*)&fmt + 1;ap802,25767
  state = 0;state805,25894
  ap = (uint*)(void*)&fmt + 1;ap807,25952
    c = fmt[i] & 0xff;c811,26145
    c = fmt[i] & 0xff;c832,26977
        state = '%';state837,27161
          s = "(null)";s858,27881
      state = 0;state891,29056
        state = '%';state912,29761
      state = 0;state927,30400
        s = (char*)*ap;s934,30683
      state = 0;state945,31106
        s = (char*)*ap;s947,31168
      state = 0;state973,32235
      state = 0;state1009,33622
          s = "(null)";s1012,33737
static Header base;static1023,34122
static Header *freep;static1024,34142
voidvoid1026,34165
  bp = (Header*)ap - 1;bp1032,34246
  bp = (Header*)ap - 1;bp1041,34592
  freep = p;freep1074,35930
  freep = p;freep1106,37264
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1137,38135
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1141,38320
  p = sbrk(nu * sizeof(Header));p1160,39129
      freep = prevp;freep1173,39669
  p = sbrk(nu * sizeof(Header));p1180,39888
      freep = prevp;freep1224,41532

mkdir.asm,4370
_mkdir:     file format elf32-i386_mkdir2,1
Disassembly of section .text:Disassembly5,38
intint11,123
   a:	55                   	push   %ebpa17,306
   b:	89 e5                	mov    %esp,%ebpb18,346
   d:	57                   	push   %edid19,391
   e:	56                   	push   %esie20,431
   f:	53                   	push   %ebxf21,471
  os = s;os96,2980
  a1:	5b                   	pop    %ebxa1109,3427
  a2:	5d                   	pop    %ebpa2110,3467
  a3:	c3                   	ret    a3111,3507
  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esia4112,3543
  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%ediaa113,3593
intint117,3664
  b0:	55                   	push   %ebpb0120,3707
  b1:	89 e5                	mov    %esp,%ebpb1121,3747
  b3:	53                   	push   %ebxb3122,3792
  b4:	8b 55 08             	mov    0x8(%ebp),%edxb4123,3832
  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecxb7124,3882
  ba:	0f b6 02             	movzbl (%edx),%eaxba126,3956
  bd:	0f b6 19             	movzbl (%ecx),%ebxbd127,4003
  c0:	84 c0                	test   %al,%alc0128,4050
  c2:	75 1c                	jne    e0 <strcmp+0x30>c2129,4093
  c4:	eb 2a                	jmp    f0 <strcmp+0x40>c4130,4145
  c6:	8d 76 00             	lea    0x0(%esi),%esic6131,4197
  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edic9132,4247
  d0:	83 c2 01             	add    $0x1,%edxd0134,4318
  d3:	0f b6 02             	movzbl (%edx),%eaxd3136,4387
  d6:	83 c1 01             	add    $0x1,%ecxd6138,4448
  d9:	0f b6 19             	movzbl (%ecx),%ebxd9139,4493
  dc:	84 c0                	test   %al,%aldc141,4564
  de:	74 10                	je     f0 <strcmp+0x40>de142,4607
  e0:	38 d8                	cmp    %bl,%ale0143,4659
  e2:	74 ec                	je     d0 <strcmp+0x20>e2144,4702
  e4:	29 d8                	sub    %ebx,%eaxe4146,4786
  e6:	5b                   	pop    %ebxe6148,4833
  e7:	5d                   	pop    %ebpe7149,4873
  e8:	c3                   	ret    e8150,4913
  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esie9151,4949
  f0:	31 c0                	xor    %eax,%eaxf0152,5006
  f2:	29 d8                	sub    %ebx,%eaxf2154,5083
  f4:	5b                   	pop    %ebxf4156,5130
  f5:	5d                   	pop    %ebpf5157,5170
  f6:	c3                   	ret    f6158,5210
  f7:	89 f6                	mov    %esi,%esif7159,5246
  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif9160,5291
uintuint164,5369
static inline voidstatic206,6592
    cc = read(0, &c, 1);cc284,9154
intint346,11397
  fd = open(n, O_RDONLY);fd356,11625
  r = fstat(fd, st);r366,11997
  r = fstat(fd, st);r374,12300
intint396,13027
  n = 0;n405,13238
  n = 0;n410,13422
    n = n*10 + *s++ - '0';n416,13666
  dst = vdst;dst448,14720
  src = vsrc;src449,14734
  name: \name470,15446
static voidstatic611,19111
  neg = 0;neg624,19461
    neg = 1;neg629,19592
    x = -xx;x630,19605
    x = -xx;x636,19844
    neg = 1;neg638,19897
    x = xx;x641,19973
  i = 0;i644,19990
  neg = 0;neg696,22074
voidvoid717,22736
  state = 0;state729,23063
  ap = (uint*)(void*)&fmt + 1;ap730,23076
  ap = (uint*)(void*)&fmt + 1;ap736,23327
  state = 0;state739,23454
  ap = (uint*)(void*)&fmt + 1;ap741,23512
    c = fmt[i] & 0xff;c745,23705
    c = fmt[i] & 0xff;c766,24537
        state = '%';state771,24721
          s = "(null)";s792,25441
      state = 0;state825,26616
        state = '%';state846,27321
      state = 0;state861,27960
        s = (char*)*ap;s868,28243
      state = 0;state879,28666
        s = (char*)*ap;s881,28728
      state = 0;state907,29795
      state = 0;state943,31182
          s = "(null)";s946,31297
static Header base;static957,31682
static Header *freep;static958,31702
voidvoid960,31725
  bp = (Header*)ap - 1;bp966,31806
  bp = (Header*)ap - 1;bp975,32152
  freep = p;freep1008,33490
  freep = p;freep1040,34824
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1071,35695
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1075,35880
  p = sbrk(nu * sizeof(Header));p1094,36689
      freep = prevp;freep1107,37229
  p = sbrk(nu * sizeof(Header));p1114,37448
      freep = prevp;freep1158,39092

kalloc.c,390
struct run {run16,466
  struct run *next;next17,479
  struct spinlock lock;lock21,512
  int use_lock;use_lock22,536
  struct run *freelist;freelist23,552
} kmem;kmem24,576
kinit1(void *vstart, void *vend)kinit132,881
kinit2(void *vstart, void *vend)kinit240,1004
freerange(void *vstart, void *vend)freerange47,1095
kfree(char *v)kfree60,1463
kalloc(void)kalloc83,1957

elf.h,989
#define ELF_MAGIC ELF_MAGIC3,37
struct elfhdr {elfhdr6,114
  uint magic;  // must equal ELF_MAGICmagic7,130
  uchar elf[12];elf8,169
  ushort type;type9,186
  ushort machine;machine10,201
  uint version;version11,219
  uint entry;entry12,235
  uint phoff;phoff13,249
  uint shoff;shoff14,263
  uint flags;flags15,277
  ushort ehsize;ehsize16,291
  ushort phentsize;phentsize17,308
  ushort phnum;phnum18,328
  ushort shentsize;shentsize19,344
  ushort shnum;shnum20,364
  ushort shstrndx;shstrndx21,380
struct proghdr {proghdr25,429
  uint type;type26,446
  uint off;off27,459
  uint vaddr;vaddr28,471
  uint paddr;paddr29,485
  uint filesz;filesz30,499
  uint memsz;memsz31,514
  uint flags;flags32,528
  uint align;align33,542
#define ELF_PROG_LOAD ELF_PROG_LOAD37,587
#define ELF_PROG_FLAG_EXEC ELF_PROG_FLAG_EXEC40,653
#define ELF_PROG_FLAG_WRITE ELF_PROG_FLAG_WRITE41,687
#define ELF_PROG_FLAG_READ ELF_PROG_FLAG_READ42,721

kill.c,38
main(int argc, char **argv)main6,60

umalloc.c,364
typedef long Align;Align9,175
union header {header11,196
    union header *ptr;ptr13,222
    uint size;size14,245
  } s;s15,260
  Align x;x16,267
typedef union header Header;Header19,282
static Header base;base21,312
static Header *freep;freep22,332
free(void *ap)free25,360
morecore(uint nu)morecore47,823
malloc(uint nbytes)malloc64,1056

stressfs.c,41
main(int argc, char *argv[])main17,466

rm.asm,4364
_rm:     file format elf32-i386_rm2,1
Disassembly of section .text:Disassembly5,35
intint11,120
   a:	55                   	push   %ebpa17,303
   b:	89 e5                	mov    %esp,%ebpb18,343
   d:	57                   	push   %edid19,388
   e:	56                   	push   %esie20,428
   f:	53                   	push   %ebxf21,468
  os = s;os96,2967
  a1:	5b                   	pop    %ebxa1109,3414
  a2:	5d                   	pop    %ebpa2110,3454
  a3:	c3                   	ret    a3111,3494
  a4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esia4112,3530
  aa:	8d bf 00 00 00 00    	lea    0x0(%edi),%ediaa113,3580
intint117,3651
  b0:	55                   	push   %ebpb0120,3694
  b1:	89 e5                	mov    %esp,%ebpb1121,3734
  b3:	53                   	push   %ebxb3122,3779
  b4:	8b 55 08             	mov    0x8(%ebp),%edxb4123,3819
  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecxb7124,3869
  ba:	0f b6 02             	movzbl (%edx),%eaxba126,3943
  bd:	0f b6 19             	movzbl (%ecx),%ebxbd127,3990
  c0:	84 c0                	test   %al,%alc0128,4037
  c2:	75 1c                	jne    e0 <strcmp+0x30>c2129,4080
  c4:	eb 2a                	jmp    f0 <strcmp+0x40>c4130,4132
  c6:	8d 76 00             	lea    0x0(%esi),%esic6131,4184
  c9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edic9132,4234
  d0:	83 c2 01             	add    $0x1,%edxd0134,4305
  d3:	0f b6 02             	movzbl (%edx),%eaxd3136,4374
  d6:	83 c1 01             	add    $0x1,%ecxd6138,4435
  d9:	0f b6 19             	movzbl (%ecx),%ebxd9139,4480
  dc:	84 c0                	test   %al,%aldc141,4551
  de:	74 10                	je     f0 <strcmp+0x40>de142,4594
  e0:	38 d8                	cmp    %bl,%ale0143,4646
  e2:	74 ec                	je     d0 <strcmp+0x20>e2144,4689
  e4:	29 d8                	sub    %ebx,%eaxe4146,4773
  e6:	5b                   	pop    %ebxe6148,4820
  e7:	5d                   	pop    %ebpe7149,4860
  e8:	c3                   	ret    e8150,4900
  e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esie9151,4936
  f0:	31 c0                	xor    %eax,%eaxf0152,4993
  f2:	29 d8                	sub    %ebx,%eaxf2154,5070
  f4:	5b                   	pop    %ebxf4156,5117
  f5:	5d                   	pop    %ebpf5157,5157
  f6:	c3                   	ret    f6158,5197
  f7:	89 f6                	mov    %esi,%esif7159,5233
  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif9160,5278
uintuint164,5356
static inline voidstatic206,6579
    cc = read(0, &c, 1);cc284,9141
intint346,11384
  fd = open(n, O_RDONLY);fd356,11612
  r = fstat(fd, st);r366,11984
  r = fstat(fd, st);r374,12287
intint396,13014
  n = 0;n405,13225
  n = 0;n410,13409
    n = n*10 + *s++ - '0';n416,13653
  dst = vdst;dst448,14707
  src = vsrc;src449,14721
  name: \name470,15433
static voidstatic611,19098
  neg = 0;neg624,19448
    neg = 1;neg629,19579
    x = -xx;x630,19592
    x = -xx;x636,19831
    neg = 1;neg638,19884
    x = xx;x641,19960
  i = 0;i644,19977
  neg = 0;neg696,22061
voidvoid717,22723
  state = 0;state729,23050
  ap = (uint*)(void*)&fmt + 1;ap730,23063
  ap = (uint*)(void*)&fmt + 1;ap736,23314
  state = 0;state739,23441
  ap = (uint*)(void*)&fmt + 1;ap741,23499
    c = fmt[i] & 0xff;c745,23692
    c = fmt[i] & 0xff;c766,24524
        state = '%';state771,24708
          s = "(null)";s792,25428
      state = 0;state825,26603
        state = '%';state846,27308
      state = 0;state861,27947
        s = (char*)*ap;s868,28230
      state = 0;state879,28653
        s = (char*)*ap;s881,28715
      state = 0;state907,29782
      state = 0;state943,31169
          s = "(null)";s946,31284
static Header base;static957,31669
static Header *freep;static958,31689
voidvoid960,31712
  bp = (Header*)ap - 1;bp966,31793
  bp = (Header*)ap - 1;bp975,32139
  freep = p;freep1008,33477
  freep = p;freep1040,34811
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1071,35682
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1075,35867
  p = sbrk(nu * sizeof(Header));p1094,36676
      freep = prevp;freep1107,37216
  p = sbrk(nu * sizeof(Header));p1114,37435
      freep = prevp;freep1158,39079

mmu.h,4275
#define FL_IF FL_IF5,99
#define CR0_PE CR0_PE8,186
#define CR0_WP CR0_WP9,247
#define CR0_PG CR0_PG10,304
#define CR4_PSE CR4_PSE12,355
#define SEG_KCODE SEG_KCODE15,449
#define SEG_KDATA SEG_KDATA16,485
#define SEG_UCODE SEG_UCODE17,527
#define SEG_UDATA SEG_UDATA18,561
#define SEG_TSS SEG_TSS19,601
#define NSEGS NSEGS22,697
struct segdesc {segdesc26,762
  uint lim_15_0 : 16;  // Low bits of segment limitlim_15_027,779
  uint base_15_0 : 16; // Low bits of segment base addressbase_15_028,831
  uint base_23_16 : 8; // Middle bits of segment base addressbase_23_1629,890
  uint type : 4;       // Segment type (see STS_ constants)type30,952
  uint s : 1;          // 0 = system, 1 = applications31,1012
  uint dpl : 2;        // Descriptor Privilege Leveldpl32,1066
  uint p : 1;          // Presentp33,1119
  uint lim_19_16 : 4;  // High bits of segment limitlim_19_1634,1153
  uint avl : 1;        // Unused (available for software use)avl35,1206
  uint rsv1 : 1;       // Reservedrsv136,1268
  uint db : 1;         // 0 = 16-bit segment, 1 = 32-bit segmentdb37,1303
  uint g : 1;          // Granularity: limit scaled by 4K when setg38,1368
  uint base_31_24 : 8; // High bits of segment base addressbase_31_2439,1435
#define SEG(SEG43,1517
#define SEG16(SEG1647,1739
#define DPL_USER DPL_USER53,1969
#define STA_X STA_X56,2043
#define STA_W STA_W57,2093
#define STA_R STA_R58,2160
#define STS_T32A STS_T32A61,2251
#define STS_IG32 STS_IG3262,2303
#define STS_TG32 STS_TG3263,2356
#define PDX(PDX74,2780
#define PTX(PTX77,2860
#define PGADDR(PGADDR80,2973
#define NPDENTRIES NPDENTRIES83,3092
#define NPTENTRIES NPTENTRIES84,3166
#define PGSIZE PGSIZE85,3223
#define PTXSHIFT PTXSHIFT87,3282
#define PDXSHIFT PDXSHIFT88,3351
#define PGROUNDUP(PGROUNDUP90,3421
#define PGROUNDDOWN(PGROUNDDOWN91,3476
#define PTE_P PTE_P94,3559
#define PTE_W PTE_W95,3602
#define PTE_U PTE_U96,3647
#define PTE_PS PTE_PS97,3687
#define PTE_ADDR(PTE_ADDR100,3782
#define PTE_FLAGS(PTE_FLAGS101,3829
typedef uint pte_t;pte_t104,3899
struct taskstate {taskstate107,3949
  uint link;         // Old ts selectorlink108,3968
  uint esp0;         // Stack pointers and segment selectorsesp0109,4008
  ushort ss0;        //   after an increase in privilege levelss0110,4069
  ushort padding1;padding1111,4132
  uint *esp1;esp1112,4151
  ushort ss1;ss1113,4165
  ushort padding2;padding2114,4179
  uint *esp2;esp2115,4198
  ushort ss2;ss2116,4212
  ushort padding3;padding3117,4226
  void *cr3;         // Page directory basecr3118,4245
  uint *eip;         // Saved state from last task switcheip119,4289
  uint eflags;eflags120,4347
  uint eax;          // More saved state (registers)eax121,4362
  uint ecx;ecx122,4415
  uint edx;edx123,4427
  uint ebx;ebx124,4439
  uint *esp;esp125,4451
  uint *ebp;ebp126,4464
  uint esi;esi127,4477
  uint edi;edi128,4489
  ushort es;         // Even more saved state (segment selectors)es129,4501
  ushort padding4;padding4130,4567
  ushort cs;cs131,4586
  ushort padding5;padding5132,4599
  ushort ss;ss133,4618
  ushort padding6;padding6134,4631
  ushort ds;ds135,4650
  ushort padding7;padding7136,4663
  ushort fs;fs137,4682
  ushort padding8;padding8138,4695
  ushort gs;gs139,4714
  ushort padding9;padding9140,4727
  ushort ldt;ldt141,4746
  ushort padding10;padding10142,4760
  ushort t;          // Trap on task switcht143,4780
  ushort iomb;       // I/O map base addressiomb144,4824
struct gatedesc {gatedesc148,4918
  uint off_15_0 : 16;   // low 16 bits of offset in segmentoff_15_0149,4936
  uint cs : 16;         // code segment selectorcs150,4996
  uint args : 5;        // # args, 0 for interrupt/trap gatesargs151,5045
  uint rsv1 : 3;        // reserved(should be zero I guess)rsv1152,5107
  uint type : 4;        // type(STS_{IG32,TG32})type153,5167
  uint s : 1;           // must be 0 (system)s154,5216
  uint dpl : 2;         // descriptor(meaning new) privilege leveldpl155,5262
  uint p : 1;           // Presentp156,5329
  uint off_31_16 : 16;  // high bits of offset in segmentoff_31_16157,5364
#define SETGATE(SETGATE168,5903

mp.c,273
struct cpu cpus[NCPU];cpus14,290
int ncpu;ncpu15,313
uchar ioapicid;ioapicid16,323
sum(uchar *addr, int len)sum19,353
mpsearch1(uint a, int len)mpsearch131,539
mpsearch(void)mpsearch49,1055
mpconfig(struct mp **pmp)mpconfig73,1662
mpinit(void)mpinit92,2050

bootasm.S,106
start:start12,362
start32:start3254,1774
spin:spin75,2589
gdt:gdt80,2694
gdtdesc:gdtdesc85,2859

bio.c,316
  struct spinlock lock;lock30,969
  struct buf buf[NBUF];buf31,993
  struct buf head;head35,1108
} bcache;bcache36,1127
binit(void)binit39,1143
bget(uint dev, uint blockno)bget62,1693
bread(uint dev, uint blockno)bread97,2579
bwrite(struct buf *b)bwrite110,2775
brelse(struct buf *b)brelse121,2958

defs.h,30
#define NELEM(NELEM190,5496

proc.c,767
  struct spinlock lock;lock11,163
  struct proc proc[NPROC];proc12,187
} ptable;ptable13,214
static struct proc *initproc;initproc15,225
int nextpid = 1;nextpid17,256
pinit(void)pinit24,367
cpuid() {cpuid31,467
mycpu(void)mycpu38,653
myproc(void) {myproc58,1158
allocproc(void)allocproc74,1477
userinit(void)userinit121,2330
growproc(int n)growproc159,3349
fork(void)fork181,3837
exit(void)exit228,4795
wait(void)wait273,5693
scheduler(void)scheduler323,6936
sched(void)sched366,8040
yield(void)yield386,8474
forkret(void)forkret397,8705
sleep(void *chan, struct spinlock *lk)sleep418,9202
wakeup1(void *chan)wakeup1458,10044
wakeup(void *chan)wakeup469,10264
kill(int pid)kill480,10477
procdump(void)procdump504,11006

entry.S,101
multiboot_header:multiboot_header30,846
_start = V2P_WO(entry)_start41,1141
entry:entry45,1229

vm.c,1109
pde_t *kpgdir;  // for use in scheduler()kpgdir11,194
seginit(void)seginit16,320
walkpgdir(pde_t *pgdir, const void *va, int alloc)walkpgdir36,1045
mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)mappages61,1765
static struct kmap {kmap105,3299
  void *virt;virt106,3320
  uint phys_start;phys_start107,3334
  uint phys_end;phys_end108,3353
  int perm;perm109,3370
} kmap[] = {kmap110,3382
setupkvm(void)setupkvm119,3730
kvmalloc(void)kvmalloc141,4257
switchkvm(void)switchkvm150,4420
switchuvm(struct proc *p)switchuvm157,4565
inituvm(pde_t *pgdir, char *init, uint sz)inituvm183,5354
loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)loaduvm198,5729
allocuvm(pde_t *pgdir, uint oldsz, uint newsz)allocuvm222,6376
deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)deallocuvm256,7225
freevm(pde_t *pgdir)freevm284,7772
clearpteu(pde_t *pgdir, char *uva)clearpteu303,8137
copyuvm(pde_t *pgdir, uint sz)copyuvm316,8366
uva2ka(pde_t *pgdir, char *uva)uva2ka350,9057
copyout(pde_t *pgdir, uint va, void *p, uint len)copyout366,9437

ls.c,100
fmtname(char *path)fmtname7,78
ls(char *path)ls26,426
main(int argc, char *argv[])main74,1386

string.c,435
memset(void *dst, int c, uint n)memset5,43
memcmp(const void *v1, const void *v2, uint n)memcmp16,228
memmove(void *dst, const void *src, uint n)memmove32,427
memcpy(void *dst, const void *src, uint n)memcpy53,730
strncmp(const char *p, const char *q, uint n)strncmp59,813
strncpy(char *s, const char *t, int n)strncpy69,981
safestrcpy(char *s, const char *t, int n)safestrcpy83,1192
strlen(const char *s)strlen97,1362

sh.c,1888
#define EXEC EXEC8,101
#define REDIR REDIR9,117
#define PIPE PIPE10,133
#define LIST LIST11,149
#define BACK BACK12,165
#define MAXARGS MAXARGS14,182
struct cmd {cmd16,202
  int type;type17,215
struct execcmd {execcmd20,231
  int type;type21,248
  char *argv[MAXARGS];argv22,260
  char *eargv[MAXARGS];eargv23,283
struct redircmd {redircmd26,311
  int type;type27,329
  struct cmd *cmd;cmd28,341
  char *file;file29,360
  char *efile;efile30,374
  int mode;mode31,389
  int fd;fd32,401
struct pipecmd {pipecmd35,415
  int type;type36,432
  struct cmd *left;left37,444
  struct cmd *right;right38,464
struct listcmd {listcmd41,489
  int type;type42,506
  struct cmd *left;left43,518
  struct cmd *right;right44,538
struct backcmd {backcmd47,563
  int type;type48,580
  struct cmd *cmd;cmd49,592
runcmd(struct cmd *cmd)runcmd58,750
getcmd(char *buf, int nbuf)getcmd134,2067
main(void)main145,2218
panic(char *s)panic175,2830
fork1(void)fork1182,2888
execcmd(void)execcmd196,3024
redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)redircmd207,3188
pipecmd(struct cmd *left, struct cmd *right)pipecmd223,3511
listcmd(struct cmd *left, struct cmd *right)listcmd236,3748
backcmd(struct cmd *subcmd)backcmd249,3985
char whitespace[] = " \t\r\n\v";whitespace262,4196
char symbols[] = "<|>&;()";symbols263,4229
gettoken(char **ps, char *es, char **q, char **eq)gettoken266,4262
peek(char **ps, char *es, char *toks)peek311,4871
parsecmd(char *s)parsecmd328,5198
parseline(char **ps, char *es)parseline345,5446
parsepipe(char **ps, char *es)parsepipe362,5739
parseredirs(struct cmd *cmd, char **ps, char *es)parseredirs375,5948
parseblock(char **ps, char *es)parseblock400,6480
parseexec(char **ps, char *es)parseexec416,6784
nulterminate(struct cmd *cmd)nulterminate450,7453

pipe.c,611
#define PIPESIZE PIPESIZE11,171
struct pipe {pipe13,193
  struct spinlock lock;lock14,207
  char data[PIPESIZE];data15,231
  uint nread;     // number of bytes readnread16,254
  uint nwrite;    // number of bytes writtennwrite17,296
  int readopen;   // read fd is still openreadopen18,341
  int writeopen;  // write fd is still openwriteopen19,384
pipealloc(struct file **f0, struct file **f1)pipealloc23,436
pipeclose(struct pipe *p, int writable)pipeclose60,1083
pipewrite(struct pipe *p, char *addr, int n)pipewrite79,1411
piperead(struct pipe *p, char *addr, int n)piperead101,1913

spinlock.c,309
initlock(struct spinlock *lk, char *name)initlock13,192
acquire(struct spinlock *lk)acquire25,458
release(struct spinlock *lk)release47,1000
getcallerpcs(void *v, uint pcs[])getcallerpcs72,1774
holding(struct spinlock *lock)holding90,2138
pushcli(void)pushcli105,2451
popcli(void)popcli117,2609

init.c,62
char *argv[] = { "sh", 0 };argv8,116
main(void)main11,149

rm.c,39
main(int argc, char *argv[])main6,60

usertests.asm,41816
_usertests:     file format elf32-i386_usertests2,1
Disassembly of section .text:Disassembly5,42
intint11,113
       a:	55                   	push   %ebpa17,308
       b:	89 e5                	mov    %esp,%ebpb18,352
       d:	51                   	push   %ecxd19,401
       e:	83 ec 0c             	sub    $0xc,%espe20,445
      a4:	e8 b7 05 00 00       	call   660 <writetest1>a484,2847
      a9:	e8 82 07 00 00       	call   830 <createtest>a986,2919
      ae:	e8 3d 02 00 00       	call   2f0 <openiputtest>ae89,2994
      b3:	e8 48 01 00 00       	call   200 <exitiputtest>b391,3070
      b8:	e8 63 00 00 00       	call   120 <iputtest>b893,3142
      bd:	e8 be 0c 00 00       	call   d80 <mem>bd96,3206
      c2:	e8 49 09 00 00       	call   a10 <pipe1>c298,3266
      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>c7100,3330
      cc:	e8 1f 0c 00 00       	call   cf0 <exitwait>cc102,3397
      d1:	e8 0a 27 00 00       	call   27e0 <rmdot>d1105,3463
      d6:	e8 c5 25 00 00       	call   26a0 <fourteen>d6107,3529
      db:	e8 f0 23 00 00       	call   24d0 <bigfile>db109,3597
      e0:	e8 2b 1c 00 00       	call   1d10 <subdir>e0111,3663
      e5:	e8 d6 14 00 00       	call   15c0 <linktest>e5113,3730
      ea:	e8 41 13 00 00       	call   1430 <unlinkread>ea115,3801
      ef:	e8 6c 28 00 00       	call   2960 <dirfile>ef117,3871
      f4:	e8 67 2a 00 00       	call   2b60 <iref>f4119,3935
      f9:	e8 82 2b 00 00       	call   2c80 <forktest>f9121,4000
      fe:	e8 dd 1a 00 00       	call   1be0 <bigdir>fe123,4075
  pid = fork();pid229,8420
  pid = fork();pid321,12399
  fd = open("echo", 0);fd404,15864
  fd = open("doesnotexist", 0);fd418,16448
  fd = open("small", O_CREATE|O_RDWR);fd466,18413
  fd = open("small", O_RDONLY);fd517,20788
  fd = open("small", O_RDONLY);fd526,21164
  i = read(fd, buf, 2000);i535,21565
  fd = open("big", O_CREATE|O_RDWR);fd633,25838
  fd = open("big", O_RDONLY);fd668,27407
  fd = open("big", O_RDONLY);fd677,27780
  n = 0;n681,27935
    i = read(fd, buf, 512);i694,28495
    fd = open(name, O_CREATE|O_RDWR);fd807,33345
    fd = open(name, O_CREATE|O_RDWR);fd812,33554
     a02:	e8 9b 2e 00 00       	call   38a2 <exit>a02960,39810
     a07:	89 f6                	mov    %esi,%esia07961,39861
     a09:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia09962,39910
     a10:	55                   	push   %ebpa10966,39992
     a11:	89 e5                	mov    %esp,%ebpa11967,40036
     a13:	57                   	push   %edia13968,40085
     a14:	56                   	push   %esia14969,40129
     a15:	53                   	push   %ebxa15970,40173
     a16:	8d 45 e0             	lea    -0x20(%ebp),%eaxa16972,40239
     a19:	83 ec 38             	sub    $0x38,%espa19974,40297
     a1c:	50                   	push   %eaxa1c976,40369
     a1d:	e8 90 2e 00 00       	call   38b2 <pipe>a1d977,40413
     a22:	83 c4 10             	add    $0x10,%espa22978,40464
     a25:	85 c0                	test   %eax,%eaxa25979,40514
     a27:	0f 85 3e 01 00 00    	jne    b6b <pipe1+0x15b>a27980,40563
     a2d:	89 c3                	mov    %eax,%ebxa2d981,40620
  pid = fork();pid982,40669
     a2f:	e8 66 2e 00 00       	call   389a <fork>a2f983,40685
     a34:	83 f8 00             	cmp    $0x0,%eaxa34985,40752
     a37:	0f 84 84 00 00 00    	je     ac1 <pipe1+0xb1>a37986,40801
     a3d:	0f 8e 3b 01 00 00    	jle    b7e <pipe1+0x16e>a3d988,40879
     a43:	83 ec 0c             	sub    $0xc,%espa43990,40955
     a46:	ff 75 e4             	pushl  -0x1c(%ebp)a46991,41004
    cc = 1;cc992,41055
     a49:	bf 01 00 00 00       	mov    $0x1,%edia49993,41067
     a4e:	e8 77 2e 00 00       	call   38ca <close>a4e995,41135
     a53:	83 c4 10             	add    $0x10,%espa53997,41231
    total = 0;total998,41281
     a56:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)a56999,41296
     a5d:	83 ec 04             	sub    $0x4,%espa5d1001,41396
     a60:	57                   	push   %edia601002,41445
     a61:	68 e0 85 00 00       	push   $0x85e0a611003,41489
     a66:	ff 75 e0             	pushl  -0x20(%ebp)a661004,41536
     a69:	e8 4c 2e 00 00       	call   38ba <read>a691005,41587
     a6e:	83 c4 10             	add    $0x10,%espa6e1006,41638
     a71:	85 c0                	test   %eax,%eaxa711007,41688
     a73:	0f 8e ab 00 00 00    	jle    b24 <pipe1+0x114>a731008,41737
     a79:	89 d9                	mov    %ebx,%ecxa791010,41841
     a7b:	8d 34 18             	lea    (%eax,%ebx,1),%esia7b1011,41890
     a7e:	f7 d9                	neg    %ecxa7e1012,41948
     a80:	38 9c 0b e0 85 00 00 	cmp    %bl,0x85e0(%ebx,%ecx,1)a801013,41992
     a87:	8d 53 01             	lea    0x1(%ebx),%edxa871014,42055
     a8a:	75 1b                	jne    aa7 <pipe1+0x97>a8a1015,42109
     a8c:	39 f2                	cmp    %esi,%edxa8c1017,42195
     a8e:	89 d3                	mov    %edx,%ebxa8e1018,42244
     a90:	75 ee                	jne    a80 <pipe1+0x70>a901019,42293
      cc = cc * 2;cc1020,42349
     a92:	01 ff                	add    %edi,%edia921021,42368
     a94:	01 45 d4             	add    %eax,-0x2c(%ebp)a941023,42435
     a97:	b8 00 20 00 00       	mov    $0x2000,%eaxa971024,42491
     a9c:	81 ff 00 20 00 00    	cmp    $0x2000,%edia9c1025,42543
     aa2:	0f 4f f8             	cmovg  %eax,%ediaa21026,42595
     aa5:	eb b6                	jmp    a5d <pipe1+0x4d>aa51027,42644
     aa7:	83 ec 08             	sub    $0x8,%espaa71029,42739
     aaa:	68 9e 40 00 00       	push   $0x409eaaa1030,42788
     aaf:	6a 01                	push   $0x1aaf1031,42835
     ab1:	e8 3a 2f 00 00       	call   39f0 <printf>ab11032,42879
     ab6:	83 c4 10             	add    $0x10,%espab61034,42950
     ab9:	8d 65 f4             	lea    -0xc(%ebp),%espab91036,43002
     abc:	5b                   	pop    %ebxabc1037,43057
     abd:	5e                   	pop    %esiabd1038,43101
     abe:	5f                   	pop    %ediabe1039,43145
     abf:	5d                   	pop    %ebpabf1040,43189
     ac0:	c3                   	ret    ac01041,43233
     ac1:	83 ec 0c             	sub    $0xc,%espac11043,43292
     ac4:	ff 75 e0             	pushl  -0x20(%ebp)ac41044,43341
     ac7:	31 db                	xor    %ebx,%ebxac71045,43392
     ac9:	be 09 04 00 00       	mov    $0x409,%esiac91046,43441
     ace:	e8 f7 2d 00 00       	call   38ca <close>ace1047,43492
     ad3:	83 c4 10             	add    $0x10,%espad31048,43544
     ad6:	89 d8                	mov    %ebx,%eaxad61049,43594
     ad8:	89 f2                	mov    %esi,%edxad81050,43643
     ada:	f7 d8                	neg    %eaxada1051,43692
     adc:	29 da                	sub    %ebx,%edxadc1052,43736
     ade:	66 90                	xchg   %ax,%axade1053,43785
     ae0:	88 84 03 e0 85 00 00 	mov    %al,0x85e0(%ebx,%eax,1)ae01055,43856
     ae7:	83 c0 01             	add    $0x1,%eaxae71056,43919
     aea:	39 d0                	cmp    %edx,%eaxaea1058,44000
     aec:	75 f2                	jne    ae0 <pipe1+0xd0>aec1059,44049
     aee:	83 ec 04             	sub    $0x4,%espaee1061,44149
     af1:	68 09 04 00 00       	push   $0x409af11062,44198
     af6:	68 e0 85 00 00       	push   $0x85e0af61063,44244
     afb:	ff 75 e4             	pushl  -0x1c(%ebp)afb1064,44291
     afe:	e8 bf 2d 00 00       	call   38c2 <write>afe1065,44342
     b03:	83 c4 10             	add    $0x10,%espb031066,44394
     b06:	3d 09 04 00 00       	cmp    $0x409,%eaxb061067,44444
     b0b:	0f 85 80 00 00 00    	jne    b91 <pipe1+0x181>b0b1068,44495
     b11:	81 eb 09 04 00 00    	sub    $0x409,%ebxb111069,44552
     b17:	81 fb d3 eb ff ff    	cmp    $0xffffebd3,%ebxb171071,44631
     b1d:	75 b7                	jne    ad6 <pipe1+0xc6>b1d1072,44687
     b1f:	e8 7e 2d 00 00       	call   38a2 <exit>b1f1074,44755
     b24:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)b241076,44833
     b2b:	75 29                	jne    b56 <pipe1+0x146>b2b1077,44892
     b2d:	83 ec 0c             	sub    $0xc,%espb2d1079,44968
     b30:	ff 75 e0             	pushl  -0x20(%ebp)b301080,45017
     b33:	e8 92 2d 00 00       	call   38ca <close>b331081,45068
     b38:	e8 6d 2d 00 00       	call   38aa <wait>b381083,45132
     b3d:	5a                   	pop    %edxb3d1085,45210
     b3e:	59                   	pop    %ecxb3e1086,45254
     b3f:	68 c3 40 00 00       	push   $0x40c3b3f1087,45298
     b44:	6a 01                	push   $0x1b441088,45345
     b46:	e8 a5 2e 00 00       	call   39f0 <printf>b461089,45389
     b4b:	83 c4 10             	add    $0x10,%espb4b1090,45442
     b4e:	8d 65 f4             	lea    -0xc(%ebp),%espb4e1092,45494
     b51:	5b                   	pop    %ebxb511093,45549
     b52:	5e                   	pop    %esib521094,45593
     b53:	5f                   	pop    %edib531095,45637
     b54:	5d                   	pop    %ebpb541096,45681
     b55:	c3                   	ret    b551097,45725
     b56:	53                   	push   %ebxb561099,45816
     b57:	ff 75 d4             	pushl  -0x2c(%ebp)b571100,45860
     b5a:	68 ac 40 00 00       	push   $0x40acb5a1101,45911
     b5f:	6a 01                	push   $0x1b5f1102,45958
     b61:	e8 8a 2e 00 00       	call   39f0 <printf>b611103,46002
     b66:	e8 37 2d 00 00       	call   38a2 <exit>b661105,46069
     b6b:	57                   	push   %edib6b1107,46154
     b6c:	57                   	push   %edib6c1108,46198
     b6d:	68 81 40 00 00       	push   $0x4081b6d1109,46242
     b72:	6a 01                	push   $0x1b721110,46289
     b74:	e8 77 2e 00 00       	call   39f0 <printf>b741111,46333
     b79:	e8 24 2d 00 00       	call   38a2 <exit>b791113,46398
     b7e:	50                   	push   %eaxb7e1115,46483
     b7f:	50                   	push   %eaxb7f1116,46527
     b80:	68 cd 40 00 00       	push   $0x40cdb801117,46571
     b85:	6a 01                	push   $0x1b851118,46618
     b87:	e8 64 2e 00 00       	call   39f0 <printf>b871119,46662
     b8c:	e8 11 2d 00 00       	call   38a2 <exit>b8c1121,46727
     b91:	56                   	push   %esib911123,46815
     b92:	56                   	push   %esib921124,46859
     b93:	68 90 40 00 00       	push   $0x4090b931125,46903
     b98:	6a 01                	push   $0x1b981126,46950
     b9a:	e8 51 2e 00 00       	call   39f0 <printf>b9a1127,46994
     b9f:	e8 fe 2c 00 00       	call   38a2 <exit>b9f1129,47063
     ba4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esiba41130,47114
     baa:	8d bf 00 00 00 00    	lea    0x0(%edi),%edibaa1131,47168
     bb0:	55                   	push   %ebpbb01135,47245
     bb1:	89 e5                	mov    %esp,%ebpbb11136,47289
     bb3:	57                   	push   %edibb31137,47338
     bb4:	56                   	push   %esibb41138,47382
     bb5:	53                   	push   %ebxbb51139,47426
     bb6:	83 ec 24             	sub    $0x24,%espbb61140,47470
     bb9:	68 dc 40 00 00       	push   $0x40dcbb91142,47546
     bbe:	6a 01                	push   $0x1bbe1143,47593
     bc0:	e8 2b 2e 00 00       	call   39f0 <printf>bc01144,47637
  pid1 = fork();pid11145,47690
     bc5:	e8 d0 2c 00 00       	call   389a <fork>bc51146,47707
     bca:	83 c4 10             	add    $0x10,%espbca1148,47774
     bcd:	85 c0                	test   %eax,%eaxbcd1149,47824
     bcf:	75 02                	jne    bd3 <preempt+0x23>bcf1150,47873
     bd1:	eb fe                	jmp    bd1 <preempt+0x21>bd11151,47931
     bd3:	89 c7                	mov    %eax,%edibd31152,47989
  pid2 = fork();pid21153,48038
     bd5:	e8 c0 2c 00 00       	call   389a <fork>bd51154,48055
     bda:	85 c0                	test   %eax,%eaxbda1156,48122
  pid2 = fork();pid21157,48171
     bdc:	89 c6                	mov    %eax,%esibdc1158,48188
     bde:	75 02                	jne    be2 <preempt+0x32>bde1160,48253
     be0:	eb fe                	jmp    be0 <preempt+0x30>be01161,48311
     be2:	8d 45 e0             	lea    -0x20(%ebp),%eaxbe21163,48383
     be5:	83 ec 0c             	sub    $0xc,%espbe51164,48439
     be8:	50                   	push   %eaxbe81165,48488
     be9:	e8 c4 2c 00 00       	call   38b2 <pipe>be91166,48532
  pid3 = fork();pid31167,48583
     bee:	e8 a7 2c 00 00       	call   389a <fork>bee1168,48600
     bf3:	83 c4 10             	add    $0x10,%espbf31170,48668
     bf6:	85 c0                	test   %eax,%eaxbf61171,48718
  pid3 = fork();pid31172,48767
     bf8:	89 c3                	mov    %eax,%ebxbf81173,48784
     bfa:	75 46                	jne    c42 <preempt+0x92>bfa1175,48850
     bfc:	83 ec 0c             	sub    $0xc,%espbfc1177,48928
     bff:	ff 75 e0             	pushl  -0x20(%ebp)bff1178,48977
     c02:	e8 c3 2c 00 00       	call   38ca <close>c021179,49028
     c07:	83 c4 0c             	add    $0xc,%espc071181,49116
     c0a:	6a 01                	push   $0x1c0a1182,49165
     c0c:	68 a1 46 00 00       	push   $0x46a1c0c1183,49209
     c11:	ff 75 e4             	pushl  -0x1c(%ebp)c111184,49256
     c14:	e8 a9 2c 00 00       	call   38c2 <write>c141185,49307
     c19:	83 c4 10             	add    $0x10,%espc191186,49359
     c1c:	83 e8 01             	sub    $0x1,%eaxc1c1187,49409
     c1f:	74 11                	je     c32 <preempt+0x82>c1f1188,49458
     c21:	50                   	push   %eaxc211190,49556
     c22:	50                   	push   %eaxc221191,49600
     c23:	68 e6 40 00 00       	push   $0x40e6c231192,49644
     c28:	6a 01                	push   $0x1c281193,49691
     c2a:	e8 c1 2d 00 00       	call   39f0 <printf>c2a1194,49735
     c2f:	83 c4 10             	add    $0x10,%espc2f1195,49788
     c32:	83 ec 0c             	sub    $0xc,%espc321197,49858
     c35:	ff 75 e4             	pushl  -0x1c(%ebp)c351198,49907
     c38:	e8 8d 2c 00 00       	call   38ca <close>c381199,49958
     c3d:	83 c4 10             	add    $0x10,%espc3d1200,50010
     c40:	eb fe                	jmp    c40 <preempt+0x90>c401201,50060
     c42:	83 ec 0c             	sub    $0xc,%espc421203,50136
     c45:	ff 75 e4             	pushl  -0x1c(%ebp)c451204,50185
     c48:	e8 7d 2c 00 00       	call   38ca <close>c481205,50236
     c4d:	83 c4 0c             	add    $0xc,%espc4d1207,50332
     c50:	68 00 20 00 00       	push   $0x2000c501208,50381
     c55:	68 e0 85 00 00       	push   $0x85e0c551209,50428
     c5a:	ff 75 e0             	pushl  -0x20(%ebp)c5a1210,50475
     c5d:	e8 58 2c 00 00       	call   38ba <read>c5d1211,50526
     c62:	83 c4 10             	add    $0x10,%espc621212,50577
     c65:	83 e8 01             	sub    $0x1,%eaxc651213,50627
     c68:	74 19                	je     c83 <preempt+0xd3>c681214,50676
     c6a:	50                   	push   %eaxc6a1216,50771
     c6b:	50                   	push   %eaxc6b1217,50815
     c6c:	68 fa 40 00 00       	push   $0x40fac6c1218,50859
     c71:	6a 01                	push   $0x1c711219,50906
     c73:	e8 78 2d 00 00       	call   39f0 <printf>c731220,50950
     c78:	83 c4 10             	add    $0x10,%espc781222,51015
     c7b:	8d 65 f4             	lea    -0xc(%ebp),%espc7b1224,51067
     c7e:	5b                   	pop    %ebxc7e1225,51122
     c7f:	5e                   	pop    %esic7f1226,51166
     c80:	5f                   	pop    %edic801227,51210
     c81:	5d                   	pop    %ebpc811228,51254
     c82:	c3                   	ret    c821229,51298
     c83:	83 ec 0c             	sub    $0xc,%espc831231,51356
     c86:	ff 75 e0             	pushl  -0x20(%ebp)c861232,51405
     c89:	e8 3c 2c 00 00       	call   38ca <close>c891233,51456
     c8e:	58                   	pop    %eaxc8e1235,51533
     c8f:	5a                   	pop    %edxc8f1236,51577
     c90:	68 0d 41 00 00       	push   $0x410dc901237,51621
     c95:	6a 01                	push   $0x1c951238,51668
     c97:	e8 54 2d 00 00       	call   39f0 <printf>c971239,51712
     c9c:	89 3c 24             	mov    %edi,(%esp)c9c1241,51779
     c9f:	e8 2e 2c 00 00       	call   38d2 <kill>c9f1242,51830
     ca4:	89 34 24             	mov    %esi,(%esp)ca41244,51895
     ca7:	e8 26 2c 00 00       	call   38d2 <kill>ca71245,51946
     cac:	89 1c 24             	mov    %ebx,(%esp)cac1247,52011
     caf:	e8 1e 2c 00 00       	call   38d2 <kill>caf1248,52062
     cb4:	59                   	pop    %ecxcb41250,52138
     cb5:	5b                   	pop    %ebxcb51251,52182
     cb6:	68 16 41 00 00       	push   $0x4116cb61252,52226
     cbb:	6a 01                	push   $0x1cbb1253,52273
     cbd:	e8 2e 2d 00 00       	call   39f0 <printf>cbd1254,52317
     cc2:	e8 e3 2b 00 00       	call   38aa <wait>cc21256,52380
     cc7:	e8 de 2b 00 00       	call   38aa <wait>cc71258,52441
     ccc:	e8 d9 2b 00 00       	call   38aa <wait>ccc1260,52502
     cd1:	5e                   	pop    %esicd11262,52582
     cd2:	5f                   	pop    %edicd21263,52626
     cd3:	68 1f 41 00 00       	push   $0x411fcd31264,52670
     cd8:	6a 01                	push   $0x1cd81265,52717
     cda:	e8 11 2d 00 00       	call   39f0 <printf>cda1266,52761
     cdf:	83 c4 10             	add    $0x10,%espcdf1267,52814
     ce2:	eb 97                	jmp    c7b <preempt+0xcb>ce21268,52864
     ce4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esice41269,52922
     cea:	8d bf 00 00 00 00    	lea    0x0(%edi),%edicea1270,52976
     cf0:	55                   	push   %ebpcf01274,53054
     cf1:	89 e5                	mov    %esp,%ebpcf11275,53098
     cf3:	56                   	push   %esicf31276,53147
     cf4:	be 64 00 00 00       	mov    $0x64,%esicf41277,53191
     cf9:	53                   	push   %ebxcf91278,53241
     cfa:	eb 14                	jmp    d10 <exitwait+0x20>cfa1279,53285
     cfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esicfc1280,53344
     d00:	74 6f                	je     d71 <exitwait+0x81>d001282,53418
     d02:	e8 a3 2b 00 00       	call   38aa <wait>d021284,53502
     d07:	39 d8                	cmp    %ebx,%eaxd071285,53553
     d09:	75 2d                	jne    d38 <exitwait+0x48>d091286,53602
     d0b:	83 ee 01             	sub    $0x1,%esid0b1288,53689
     d0e:	74 48                	je     d58 <exitwait+0x68>d0e1289,53738
    pid = fork();pid1290,53797
     d10:	e8 85 2b 00 00       	call   389a <fork>d101291,53815
     d15:	85 c0                	test   %eax,%eaxd151293,53883
    pid = fork();pid1294,53932
     d17:	89 c3                	mov    %eax,%ebxd171295,53950
     d19:	79 e5                	jns    d00 <exitwait+0x10>d191297,54016
     d1b:	83 ec 08             	sub    $0x8,%espd1b1299,54109
     d1e:	68 89 4c 00 00       	push   $0x4c89d1e1300,54158
     d23:	6a 01                	push   $0x1d231301,54205
     d25:	e8 c6 2c 00 00       	call   39f0 <printf>d251302,54249
     d2a:	83 c4 10             	add    $0x10,%espd2a1304,54316
     d2d:	8d 65 f8             	lea    -0x8(%ebp),%espd2d1306,54368
     d30:	5b                   	pop    %ebxd301307,54423
     d31:	5e                   	pop    %esid311308,54467
     d32:	5d                   	pop    %ebpd321309,54511
     d33:	c3                   	ret    d331310,54555
     d34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esid341311,54595
     d38:	83 ec 08             	sub    $0x8,%espd381313,54695
     d3b:	68 2b 41 00 00       	push   $0x412bd3b1314,54744
     d40:	6a 01                	push   $0x1d401315,54791
     d42:	e8 a9 2c 00 00       	call   39f0 <printf>d421316,54835
     d47:	83 c4 10             	add    $0x10,%espd471318,54904
     d4a:	8d 65 f8             	lea    -0x8(%ebp),%espd4a1320,54956
     d4d:	5b                   	pop    %ebxd4d1321,55011
     d4e:	5e                   	pop    %esid4e1322,55055
     d4f:	5d                   	pop    %ebpd4f1323,55099
     d50:	c3                   	ret    d501324,55143
     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esid511325,55183
     d58:	83 ec 08             	sub    $0x8,%espd581327,55274
     d5b:	68 3b 41 00 00       	push   $0x413bd5b1328,55323
     d60:	6a 01                	push   $0x1d601329,55370
     d62:	e8 89 2c 00 00       	call   39f0 <printf>d621330,55414
     d67:	83 c4 10             	add    $0x10,%espd671331,55467
     d6a:	8d 65 f8             	lea    -0x8(%ebp),%espd6a1333,55519
     d6d:	5b                   	pop    %ebxd6d1334,55574
     d6e:	5e                   	pop    %esid6e1335,55618
     d6f:	5d                   	pop    %ebpd6f1336,55662
     d70:	c3                   	ret    d701337,55706
     d71:	e8 2c 2b 00 00       	call   38a2 <exit>d711339,55760
     d76:	8d 76 00             	lea    0x0(%esi),%esid761340,55811
     d79:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edid791341,55865
     d80:	55                   	push   %ebpd801345,55945
     d81:	89 e5                	mov    %esp,%ebpd811346,55989
     d83:	57                   	push   %edid831347,56038
     d84:	56                   	push   %esid841348,56082
     d85:	53                   	push   %ebxd851349,56126
     d86:	31 db                	xor    %ebx,%ebxd861350,56170
     d88:	83 ec 14             	sub    $0x14,%espd881351,56219
     d8b:	68 48 41 00 00       	push   $0x4148d8b1353,56296
     d90:	6a 01                	push   $0x1d901354,56343
     d92:	e8 59 2c 00 00       	call   39f0 <printf>d921355,56387
  ppid = getpid();ppid1356,56440
     d97:	e8 86 2b 00 00       	call   3922 <getpid>d971357,56459
     d9c:	89 c6                	mov    %eax,%esid9c1358,56512
     d9e:	e8 f7 2a 00 00       	call   389a <fork>d9e1360,56588
     da3:	83 c4 10             	add    $0x10,%espda31361,56639
     da6:	85 c0                	test   %eax,%eaxda61362,56689
     da8:	74 0a                	je     db4 <mem+0x34>da81363,56738
     daa:	e9 89 00 00 00       	jmp    e38 <mem+0xb8>daa1364,56792
     daf:	90                   	nopdaf1365,56846
     db0:	89 18                	mov    %ebx,(%eax)db01367,56906
     db2:	89 c3                	mov    %eax,%ebxdb21368,56957
     db4:	83 ec 0c             	sub    $0xc,%espdb41370,57044
     db7:	68 11 27 00 00       	push   $0x2711db71371,57093
     dbc:	e8 8f 2e 00 00       	call   3c50 <malloc>dbc1372,57140
     dc1:	83 c4 10             	add    $0x10,%espdc11373,57193
     dc4:	85 c0                	test   %eax,%eaxdc41374,57243
     dc6:	75 e8                	jne    db0 <mem+0x30>dc61375,57292
     dc8:	85 db                	test   %ebx,%ebxdc81377,57361
     dca:	74 18                	je     de4 <mem+0x64>dca1378,57410
     dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esidcc1379,57464
      m2 = *(char**)m1;m21380,57525
     dd0:	8b 3b                	mov    (%ebx),%edidd01381,57549
     dd2:	83 ec 0c             	sub    $0xc,%espdd21383,57616
     dd5:	53                   	push   %ebxdd51384,57665
     dd6:	89 fb                	mov    %edi,%ebxdd61385,57709
     dd8:	e8 e3 2d 00 00       	call   3bc0 <free>dd81386,57758
     ddd:	83 c4 10             	add    $0x10,%espddd1388,57824
     de0:	85 db                	test   %ebx,%ebxde01389,57874
     de2:	75 ec                	jne    dd0 <mem+0x50>de21390,57923
    m1 = malloc(1024*20);m11391,57977
     de4:	83 ec 0c             	sub    $0xc,%espde41392,58003
     de7:	68 00 50 00 00       	push   $0x5000de71393,58052
     dec:	e8 5f 2e 00 00       	call   3c50 <malloc>dec1394,58099
     df1:	83 c4 10             	add    $0x10,%espdf11396,58169
     df4:	85 c0                	test   %eax,%eaxdf41397,58219
     df6:	74 20                	je     e18 <mem+0x98>df61398,58268
     df8:	83 ec 0c             	sub    $0xc,%espdf81400,58336
     dfb:	50                   	push   %eaxdfb1401,58385
     dfc:	e8 bf 2d 00 00       	call   3bc0 <free>dfc1402,58429
     e01:	58                   	pop    %eaxe011404,58507
     e02:	5a                   	pop    %edxe021405,58551
     e03:	68 6c 41 00 00       	push   $0x416ce031406,58595
     e08:	6a 01                	push   $0x1e081407,58642
     e0a:	e8 e1 2b 00 00       	call   39f0 <printf>e0a1408,58686
     e0f:	e8 8e 2a 00 00       	call   38a2 <exit>e0f1410,58751
     e14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie141411,58802
     e18:	83 ec 08             	sub    $0x8,%espe181413,58910
     e1b:	68 52 41 00 00       	push   $0x4152e1b1414,58959
     e20:	6a 01                	push   $0x1e201415,59006
     e22:	e8 c9 2b 00 00       	call   39f0 <printf>e221416,59050
     e27:	89 34 24             	mov    %esi,(%esp)e271418,59121
     e2a:	e8 a3 2a 00 00       	call   38d2 <kill>e2a1419,59172
     e2f:	e8 6e 2a 00 00       	call   38a2 <exit>e2f1421,59237
     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie341422,59288
     e38:	8d 65 f4             	lea    -0xc(%ebp),%espe381424,59351
     e3b:	5b                   	pop    %ebxe3b1425,59406
     e3c:	5e                   	pop    %esie3c1426,59450
     e3d:	5f                   	pop    %edie3d1427,59494
     e3e:	5d                   	pop    %ebpe3e1428,59538
     e3f:	e9 66 2a 00 00       	jmp    38aa <wait>e3f1430,59594
     e44:	8d b6 00 00 00 00    	lea    0x0(%esi),%esie441431,59645
     e4a:	8d bf 00 00 00 00    	lea    0x0(%edi),%edie4a1432,59699
     e50:	55                   	push   %ebpe501436,59777
     e51:	89 e5                	mov    %esp,%ebpe511437,59821
     e53:	57                   	push   %edie531438,59870
     e54:	56                   	push   %esie541439,59914
     e55:	53                   	push   %ebxe551440,59958
     e56:	83 ec 34             	sub    $0x34,%espe561441,60002
     e59:	68 74 41 00 00       	push   $0x4174e591443,60084
     e5e:	6a 01                	push   $0x1e5e1444,60131
     e60:	e8 8b 2b 00 00       	call   39f0 <printf>e601445,60175
     e65:	c7 04 24 83 41 00 00 	movl   $0x4183,(%esp)e651447,60250
     e6c:	e8 81 2a 00 00       	call   38f2 <unlink>e6c1448,60304
  fd = open("sharedfd", O_CREATE|O_RDWR);fd1449,60357
     e71:	59                   	pop    %ecxe711450,60399
     e72:	5b                   	pop    %ebxe721451,60443
     e73:	68 02 02 00 00       	push   $0x202e731452,60487
     e78:	68 83 41 00 00       	push   $0x4183e781453,60533
     e7d:	e8 60 2a 00 00       	call   38e2 <open>e7d1454,60580
     e82:	83 c4 10             	add    $0x10,%espe821456,60645
     e85:	85 c0                	test   %eax,%eaxe851457,60695
     e87:	0f 88 33 01 00 00    	js     fc0 <sharedfd+0x170>e871458,60744
     e8d:	89 c6                	mov    %eax,%esie8d1459,60804
     e8f:	bb e8 03 00 00       	mov    $0x3e8,%ebxe8f1461,60897
  pid = fork();pid1462,60948
     e94:	e8 01 2a 00 00       	call   389a <fork>e941463,60964
     e99:	83 f8 01             	cmp    $0x1,%eaxe991465,61059
  pid = fork();pid1466,61108
     e9c:	89 c7                	mov    %eax,%edie9c1467,61124
     e9e:	19 c0                	sbb    %eax,%eaxe9e1469,61217
     ea0:	83 ec 04             	sub    $0x4,%espea01470,61266
     ea3:	83 e0 f3             	and    $0xfffffff3,%eaxea31471,61315
     ea6:	6a 0a                	push   $0xaea61472,61371
     ea8:	83 c0 70             	add    $0x70,%eaxea81473,61415
     eab:	50                   	push   %eaxeab1474,61465
     eac:	8d 45 de             	lea    -0x22(%ebp),%eaxeac1475,61509
     eaf:	50                   	push   %eaxeaf1476,61565
     eb0:	e8 4b 28 00 00       	call   3700 <memset>eb01477,61609
     eb5:	83 c4 10             	add    $0x10,%espeb51478,61662
     eb8:	eb 0b                	jmp    ec5 <sharedfd+0x75>eb81479,61712
     eba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esieba1480,61771
     ec0:	83 eb 01             	sub    $0x1,%ebxec01482,61854
     ec3:	74 29                	je     eee <sharedfd+0x9e>ec31483,61903
     ec5:	8d 45 de             	lea    -0x22(%ebp),%eaxec51485,62014
     ec8:	83 ec 04             	sub    $0x4,%espec81486,62070
     ecb:	6a 0a                	push   $0xaecb1487,62119
     ecd:	50                   	push   %eaxecd1488,62163
     ece:	56                   	push   %esiece1489,62207
     ecf:	e8 ee 29 00 00       	call   38c2 <write>ecf1490,62251
     ed4:	83 c4 10             	add    $0x10,%esped41491,62303
     ed7:	83 f8 0a             	cmp    $0xa,%eaxed71492,62353
     eda:	74 e4                	je     ec0 <sharedfd+0x70>eda1493,62402
     edc:	83 ec 08             	sub    $0x8,%espedc1495,62514
     edf:	68 74 4e 00 00       	push   $0x4e74edf1496,62563
     ee4:	6a 01                	push   $0x1ee41497,62610
     ee6:	e8 05 2b 00 00       	call   39f0 <printf>ee61498,62654
     eeb:	83 c4 10             	add    $0x10,%espeeb1500,62720
     eee:	85 ff                	test   %edi,%edieee1502,62785
     ef0:	0f 84 fe 00 00 00    	je     ff4 <sharedfd+0x1a4>ef01503,62834
     ef6:	e8 af 29 00 00       	call   38aa <wait>ef61505,62906
     efb:	83 ec 0c             	sub    $0xc,%espefb1507,62970
  nc = np = 0;nc1508,63019
     efe:	31 db                	xor    %ebx,%ebxefe1509,63034
     f00:	31 ff                	xor    %edi,%edif001510,63083
     f02:	56                   	push   %esif021512,63145
     f03:	8d 75 e8             	lea    -0x18(%ebp),%esif031513,63189
     f06:	e8 bf 29 00 00       	call   38ca <close>f061514,63245
  fd = open("sharedfd", 0);fd1515,63297
     f0b:	58                   	pop    %eaxf0b1516,63325
     f0c:	5a                   	pop    %edxf0c1517,63369
     f0d:	6a 00                	push   $0x0f0d1518,63413
     f0f:	68 83 41 00 00       	push   $0x4183f0f1519,63457
     f14:	e8 c9 29 00 00       	call   38e2 <open>f141520,63504
     f19:	83 c4 10             	add    $0x10,%espf191522,63569
     f1c:	85 c0                	test   %eax,%eaxf1c1523,63619
  fd = open("sharedfd", 0);fd1524,63668
     f1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)f1e1525,63696
     f21:	0f 88 b3 00 00 00    	js     fda <sharedfd+0x18a>f211527,63766
     f27:	89 f8                	mov    %edi,%eaxf271528,63826
     f29:	89 df                	mov    %ebx,%edif291529,63875
     f2b:	89 c3                	mov    %eax,%ebxf2b1530,63924
     f2d:	8d 76 00             	lea    0x0(%esi),%esif2d1531,63973
     f30:	8d 45 de             	lea    -0x22(%ebp),%eaxf301533,64074
     f33:	83 ec 04             	sub    $0x4,%espf331534,64130
     f36:	6a 0a                	push   $0xaf361535,64179
     f38:	50                   	push   %eaxf381536,64223
     f39:	ff 75 d4             	pushl  -0x2c(%ebp)f391537,64267
     f3c:	e8 79 29 00 00       	call   38ba <read>f3c1538,64318
     f41:	83 c4 10             	add    $0x10,%espf411539,64369
     f44:	85 c0                	test   %eax,%eaxf441540,64419
     f46:	7e 28                	jle    f70 <sharedfd+0x120>f461541,64468
     f48:	8d 45 de             	lea    -0x22(%ebp),%eaxf481542,64528
     f4b:	eb 15                	jmp    f62 <sharedfd+0x112>f4b1543,64584
     f4d:	8d 76 00             	lea    0x0(%esi),%esif4d1544,64644
     f50:	80 fa 70             	cmp    $0x70,%dlf501546,64712
     f53:	0f 94 c2             	sete   %dlf531547,64761
     f56:	0f b6 d2             	movzbl %dl,%edxf561548,64804
     f59:	01 d7                	add    %edx,%edif591549,64852
     f5b:	83 c0 01             	add    $0x1,%eaxf5b1550,64901
     f5e:	39 f0                	cmp    %esi,%eaxf5e1552,64988
     f60:	74 ce                	je     f30 <sharedfd+0xe0>f601553,65037
     f62:	0f b6 10             	movzbl (%eax),%edxf621555,65120
     f65:	80 fa 63             	cmp    $0x63,%dlf651556,65171
     f68:	75 e6                	jne    f50 <sharedfd+0x100>f681557,65220
     f6a:	83 c3 01             	add    $0x1,%ebxf6a1559,65294
     f6d:	eb ec                	jmp    f5b <sharedfd+0x10b>f6d1560,65343
     f6f:	90                   	nopf6f1561,65403
     f70:	83 ec 0c             	sub    $0xc,%espf701563,65452
     f73:	89 d8                	mov    %ebx,%eaxf731564,65501
     f75:	ff 75 d4             	pushl  -0x2c(%ebp)f751565,65550
     f78:	89 fb                	mov    %edi,%ebxf781566,65601
     f7a:	89 c7                	mov    %eax,%edif7a1567,65650
     f7c:	e8 49 29 00 00       	call   38ca <close>f7c1568,65699
     f81:	c7 04 24 83 41 00 00 	movl   $0x4183,(%esp)f811570,65773
     f88:	e8 65 29 00 00       	call   38f2 <unlink>f881571,65827
     f8d:	83 c4 10             	add    $0x10,%espf8d1573,65914
     f90:	81 ff 10 27 00 00    	cmp    $0x2710,%edif901574,65964
     f96:	75 61                	jne    ff9 <sharedfd+0x1a9>f961575,66016
     f98:	81 fb 10 27 00 00    	cmp    $0x2710,%ebxf981576,66076
     f9e:	75 59                	jne    ff9 <sharedfd+0x1a9>f9e1577,66128
     fa0:	83 ec 08             	sub    $0x8,%espfa01579,66220
     fa3:	68 8c 41 00 00       	push   $0x418cfa31580,66269
     fa8:	6a 01                	push   $0x1fa81581,66316
     faa:	e8 41 2a 00 00       	call   39f0 <printf>faa1582,66360
     faf:	83 c4 10             	add    $0x10,%espfaf1583,66413
     fb2:	8d 65 f4             	lea    -0xc(%ebp),%espfb21585,66465
     fb5:	5b                   	pop    %ebxfb51586,66520
     fb6:	5e                   	pop    %esifb61587,66564
     fb7:	5f                   	pop    %edifb71588,66608
     fb8:	5d                   	pop    %ebpfb81589,66652
     fb9:	c3                   	ret    fb91590,66696
     fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esifba1591,66736
     fc0:	83 ec 08             	sub    $0x8,%espfc01593,66850
     fc3:	68 48 4e 00 00       	push   $0x4e48fc31594,66899
     fc8:	6a 01                	push   $0x1fc81595,66946
     fca:	e8 21 2a 00 00       	call   39f0 <printf>fca1596,66990
     fcf:	83 c4 10             	add    $0x10,%espfcf1598,67055
     fd2:	8d 65 f4             	lea    -0xc(%ebp),%espfd21600,67107
     fd5:	5b                   	pop    %ebxfd51601,67162
     fd6:	5e                   	pop    %esifd61602,67206
     fd7:	5f                   	pop    %edifd71603,67250
     fd8:	5d                   	pop    %ebpfd81604,67294
     fd9:	c3                   	ret    fd91605,67338
     fda:	83 ec 08             	sub    $0x8,%espfda1607,67440
     fdd:	68 94 4e 00 00       	push   $0x4e94fdd1608,67489
     fe2:	6a 01                	push   $0x1fe21609,67536
     fe4:	e8 07 2a 00 00       	call   39f0 <printf>fe41610,67580
     fe9:	83 c4 10             	add    $0x10,%espfe91612,67645
     fec:	8d 65 f4             	lea    -0xc(%ebp),%espfec1614,67697
     fef:	5b                   	pop    %ebxfef1615,67752
     ff0:	5e                   	pop    %esiff01616,67796
     ff1:	5f                   	pop    %ediff11617,67840
     ff2:	5d                   	pop    %ebpff21618,67884
     ff3:	c3                   	ret    ff31619,67928
     ff4:	e8 a9 28 00 00       	call   38a2 <exit>ff41621,67980
     ff9:	53                   	push   %ebxff91623,68079
     ffa:	57                   	push   %ediffa1624,68123
     ffb:	68 99 41 00 00       	push   $0x4199ffb1625,68167
    pid = fork();pid1661,69653
    fd = open(fname, 0);fd1684,70654
    total = 0;total1686,70728
    fd = open(fname, 0);fd1688,70792
    fd = open(fname, 0);fd1694,71062
      fd = open(fname, O_CREATE | O_RDWR);fd1756,73923
      fd = open(fname, O_CREATE | O_RDWR);fd1764,74273
    pid = fork();pid1849,77909
      fd = open(name, 0);fd1885,79552
      fd = open(name, 0);fd1889,79708
      fd = open(name, 0);fd1894,79902
        fd = open(name, O_CREATE | O_RDWR);fd1984,84014
        fd = open(name, O_CREATE | O_RDWR);fd1988,84189
        fd = open(name, O_CREATE | O_RDWR);fd1993,84405
  fd = open("unlinkread", O_CREATE | O_RDWR);fd2084,88410
  fd = open("unlinkread", O_RDWR);fd2104,89290
  fd = open("unlinkread", O_RDWR);fd2113,89668
  fd1 = open("unlinkread", O_CREATE | O_RDWR);fd12124,90173
  fd1 = open("unlinkread", O_CREATE | O_RDWR);fd12131,90486
  fd = open("lf1", O_CREATE|O_RDWR);fd2249,95503
  fd = open("lf2", 0);fd2295,97589
  fd = open("lf2", 0);fd2303,97916
      fd = open(file, O_CREATE | O_RDWR);fd2467,104962
    pid = fork();pid2499,106237
      fd = open(file, O_CREATE | O_RDWR);fd2514,106951
  fd = open(".", 0);fd2564,109166
  fd = open(".", 0);fd2573,109563
  n = 0;n2575,109633
      i = de.name[1] - '0';i2595,110593
    pid = fork();pid2654,113207
    pid = fork();pid2658,113342
  pid = fork();pid2775,118488
  pid = fork();pid2780,118669
    x = x * 1103515245 + 12345;x2806,119840
  fd = open("bd", O_CREATE);fd2882,123123
  fd = open("dd/ff", O_CREATE | O_RDWR);fd3024,129125
  fd = open("dd/ff", O_CREATE | O_RDWR);fd3032,129472
  fd = open("dd/dd/ff", O_CREATE | O_RDWR);fd3058,130633
  fd = open("dd/dd/ff", O_CREATE | O_RDWR);fd3066,130983
  fd = open("dd/dd/../ff", 0);fd3079,131523
  fd = open("dd/dd/../ff", 0);fd3088,131897
  cc = read(fd, buf, sizeof(buf));cc3092,132050
  fd = open("dd/dd/ffff", 0);fd3160,135285
  fd = open("dd/dd/ffff", 0);fd3168,135619
    fd = open("bigwrite", O_CREATE | O_RDWR);fd3652,157071
    fd = open("bigwrite", O_CREATE | O_RDWR);fd3660,157425
  fd = open("bigfile", O_CREATE | O_RDWR);fd3742,160905
  fd = open("bigfile", 0);fd3779,162581
  fd = open("bigfile", 0);fd3788,162951
  total = 0;total3792,163101
    cc = read(fd, buf, 300);cc3814,164062
  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);fd3941,169421
  fd = open("12345678901234/12345678901234/12345678901234", 0);fd3954,170020
  fd = open("dirfile", O_CREATE);fd4203,180840
  fd = open("dirfile/xx", 0);fd4223,181731
  fd = open("dirfile/xx", O_CREATE);fd4232,182126
  fd = open(".", O_RDWR);fd4270,183942
  fd = open(".", 0);fd4279,184333
  fd = open(".", 0);fd4286,184623
    fd = open("", O_CREATE);fd4426,190560
    fd = open("xx", O_CREATE);fd4441,191204
    pid = fork();pid4517,194361
  oldbrk = sbrk(0);oldbrk4587,197222
  a = sbrk(0);a4590,197344
  oldbrk = sbrk(0);oldbrk4592,197410
  a = sbrk(0);a4594,197479
    a = b + 1;a4600,197765
    b = sbrk(1);b4602,197829
    a = b + 1;a4614,198307
  pid = fork();pid4619,198517
  pid = fork();pid4623,198648
  c = sbrk(1);c4627,198789
  c = sbrk(1);c4631,198920
  c = sbrk(1);c4634,199030
  a = sbrk(0);a4646,199511
  amt = (BIG) - (uint)a;amt4651,199719
  p = sbrk(amt);p4654,199848
  a = sbrk(0);a4661,200143
  a = sbrk(0);a4665,200280
  c = sbrk(-4096);c4668,200390
  a = sbrk(0);a4670,200467
  c = sbrk(-4096);c4672,200531
  c = sbrk(0);c4678,200798
  a = sbrk(0);a4687,201196
  c = sbrk(4096);c4692,201404
  c = sbrk(4096);c4698,201663
  a = sbrk(0);a4712,202328
  c = sbrk(-(sbrk(0) - oldbrk));c4716,202487
  a = sbrk(0);a4718,202571
  c = sbrk(-(sbrk(0) - oldbrk));c4720,202635
    ppid = getpid();ppid4732,203223
    pid = fork();pid4735,203346
  c = sbrk(4096);c4803,206630
  pid = fork();pid5100,219495
  fd = open("bigarg-ok", 0);fd5110,219884
    fd = open("bigarg-ok", O_CREATE);fd5159,222177
  pid = fork();pid5427,233827
  fd = open("init", O_RDONLY);fd5476,235802
  randstate = randstate * 1664525 + 1013904223;randstate5521,237689
  randstate = randstate * 1664525 + 1013904223;randstate5529,237959
  os = s;os5553,238686
intint5574,239424
uintuint5621,241265
static inline voidstatic5663,242582
    cc = read(0, &c, 1);cc5741,245338
intint5803,247762
  fd = open(n, O_RDONLY);fd5813,248006
  r = fstat(fd, st);r5823,248408
  r = fstat(fd, st);r5831,248736
intint5853,249521
  n = 0;n5862,249748
  n = 0;n5867,249944
    n = n*10 + *s++ - '0';n5873,250205
  dst = vdst;dst5905,251336
  src = vsrc;src5906,251350
  name: \name5927,252116
static voidstatic6068,256061
  neg = 0;neg6081,256435
    neg = 1;neg6086,256574
    x = -xx;x6087,256587
    x = -xx;x6093,256844
    neg = 1;neg6095,256901
    x = xx;x6098,256981
  i = 0;i6101,256998
  neg = 0;neg6153,259244
voidvoid6174,259972
  state = 0;state6186,260323
  ap = (uint*)(void*)&fmt + 1;ap6187,260336
  ap = (uint*)(void*)&fmt + 1;ap6193,260604
  state = 0;state6196,260739
  ap = (uint*)(void*)&fmt + 1;ap6198,260801
    c = fmt[i] & 0xff;c6202,261007
    c = fmt[i] & 0xff;c6223,261902
        state = '%';state6228,262099
          s = "(null)";s6249,262859
      state = 0;state6282,264109
        state = '%';state6303,264868
      state = 0;state6318,265557
        s = (char*)*ap;s6325,265861
      state = 0;state6336,266313
        s = (char*)*ap;s6338,266379
      state = 0;state6364,267529
      state = 0;state6400,269020
          s = "(null)";s6403,269144
static Header base;static6414,269559
static Header *freep;static6415,269579
voidvoid6417,269602
  bp = (Header*)ap - 1;bp6423,269687
  bp = (Header*)ap - 1;bp6432,270058
  freep = p;freep6465,271477
  freep = p;freep6497,272912
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits6528,273848
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits6532,274042
  p = sbrk(nu * sizeof(Header));p6551,274901
      freep = prevp;freep6564,275475
  p = sbrk(nu * sizeof(Header));p6571,275708
      freep = prevp;freep6615,277474

memide.c,167
static int disksize;disksize18,362
static uchar *memdisk;memdisk19,383
ideinit(void)ideinit22,412
ideintr(void)ideintr30,538
iderw(struct buf *b)iderw39,729

asm.h,154
#define SEG_NULLASM SEG_NULLASM5,50
#define SEG_ASM(SEG_ASM11,304
#define STA_X STA_X16,575
#define STA_W STA_W17,625
#define STA_R STA_R18,692

mp.h,2444
struct mp {             // floating pointermp3,52
  uchar signature[4];           // "_MP_"signature4,96
  void *physaddr;               // phys addr of MP config tablephysaddr5,138
  uchar length;                 // 1length6,202
  uchar specrev;                // [14]specrev7,239
  uchar checksum;               // all bytes must add up to 0checksum8,279
  uchar type;                   // MP system config typetype9,341
  uchar imcrp;imcrp10,398
  uchar reserved[3];reserved11,413
struct mpconf {         // configuration table headermpconf14,438
  uchar signature[4];           // "PCMP"signature15,492
  ushort length;                // total table lengthlength16,534
  uchar version;                // [14]version17,588
  uchar checksum;               // all bytes must add up to 0checksum18,628
  uchar product[20];            // product idproduct19,690
  uint *oemtable;               // OEM table pointeroemtable20,736
  ushort oemlength;             // OEM table lengthoemlength21,789
  ushort entry;                 // entry countentry22,841
  uint *lapicaddr;              // address of local APIClapicaddr23,888
  ushort xlength;               // extended table lengthxlength24,945
  uchar xchecksum;              // extended table checksumxchecksum25,1002
  uchar reserved;reserved26,1061
struct mpproc {         // processor table entrympproc29,1083
  uchar type;                   // entry type (0)type30,1132
  uchar apicid;                 // local APIC idapicid31,1182
  uchar version;                // local APIC verisonversion32,1231
  uchar flags;                  // CPU flagsflags33,1285
    #define MPBOOT MPBOOT34,1330
  uchar signature[4];           // CPU signaturesignature35,1405
  uint feature;                 // feature flags from CPUID instructionfeature36,1454
  uchar reserved[8];reserved37,1526
struct mpioapic {       // I/O APIC table entrympioapic40,1551
  uchar type;                   // entry type (2)type41,1599
  uchar apicno;                 // I/O APIC idapicno42,1649
  uchar version;                // I/O APIC versionversion43,1696
  uchar flags;                  // I/O APIC flagsflags44,1748
  uint *addr;                  // I/O APIC addressaddr45,1798
#define MPPROC MPPROC49,1874
#define MPBUS MPBUS50,1919
#define MPIOAPIC MPIOAPIC51,1958
#define MPIOINTR MPIOINTR52,2002
#define MPLINTR MPLINTR53,2058

Makefile,1529
OBJS = \OBJS1,0
TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >/dev/null 2>&1; \TOOLPREFIX39,481
QEMU = $(shell if which qemu > /dev/null; \QEMU58,1331
CC = $(TOOLPREFIX)gccCC74,1992
AS = $(TOOLPREFIX)gasAS75,2014
LD = $(TOOLPREFIX)ldLD76,2036
OBJCOPY = $(TOOLPREFIX)objcopyOBJCOPY77,2057
OBJDUMP = $(TOOLPREFIX)objdumpOBJDUMP78,2088
CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fno-omit-frame-pointerCFLAGS79,2119
ASFLAGS = -m32 -gdwarf-2 -Wa,-divideASFLAGS81,2345
	dd if=/dev/zero of=xv6.img count=10000f94,2780
	dd if=bootblock of=xv6.img conv=notruncf95,2820
	dd if=kernel of=xv6.img seek=1 conv=notruncf96,2861
	dd if=/dev/zero of=xv6memfs.img count=10000f99,2943
	dd if=bootblock of=xv6memfs.img conv=notruncf100,2988
	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notruncf101,3034
MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.oMEMFSOBJS134,4481
ULIB = ulib.o usys.o printf.o umalloc.oULIB146,4940
UPROGS=\UPROGS168,5710
FILES = $(shell grep -v '^\#' runoff.list)FILES198,6154
PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)PRINT199,6197
GDBPORT = $(shell expr `id -u` % 5000 + 25000)GDBPORT214,6471
QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \QEMUGDB216,6565
CPUS := 2CPUS220,6705
QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)QEMUOPTS222,6721
EXTRA=\EXTRA250,7569

show1,0

syscall.h,726
#define SYS_fork SYS_fork2,23
#define SYS_exit SYS_exit3,45
#define SYS_wait SYS_wait4,67
#define SYS_pipe SYS_pipe5,89
#define SYS_read SYS_read6,111
#define SYS_kill SYS_kill7,133
#define SYS_exec SYS_exec8,155
#define SYS_fstat SYS_fstat9,177
#define SYS_chdir SYS_chdir10,199
#define SYS_dup SYS_dup11,221
#define SYS_getpid SYS_getpid12,243
#define SYS_sbrk SYS_sbrk13,265
#define SYS_sleep SYS_sleep14,287
#define SYS_uptime SYS_uptime15,309
#define SYS_open SYS_open16,331
#define SYS_write SYS_write17,353
#define SYS_mknod SYS_mknod18,375
#define SYS_unlink SYS_unlink19,397
#define SYS_link SYS_link20,419
#define SYS_mkdir SYS_mkdir21,441
#define SYS_close SYS_close22,463

kill.asm,4507
_kill:     file format elf32-i386_kill2,1
Disassembly of section .text:Disassembly5,37
intint11,122
   a:	55                   	push   %ebpa17,304
   b:	89 e5                	mov    %esp,%ebpb18,344
   d:	56                   	push   %esid19,389
   e:	53                   	push   %ebxe20,429
   f:	51                   	push   %ecxf21,469
  os = s;os76,2287
intint97,2971
  a0:	84 c0                	test   %al,%ala0108,3357
  a2:	75 1c                	jne    c0 <strcmp+0x30>a2109,3400
  a4:	eb 2a                	jmp    d0 <strcmp+0x40>a4110,3452
  a6:	8d 76 00             	lea    0x0(%esi),%esia6111,3504
  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia9112,3554
  b0:	83 c2 01             	add    $0x1,%edxb0114,3625
  b3:	0f b6 02             	movzbl (%edx),%eaxb3116,3694
  b6:	83 c1 01             	add    $0x1,%ecxb6118,3755
  b9:	0f b6 19             	movzbl (%ecx),%ebxb9119,3800
  bc:	84 c0                	test   %al,%albc121,3871
  be:	74 10                	je     d0 <strcmp+0x40>be122,3914
  c0:	38 d8                	cmp    %bl,%alc0123,3966
  c2:	74 ec                	je     b0 <strcmp+0x20>c2124,4009
  c4:	29 d8                	sub    %ebx,%eaxc4126,4093
  c6:	5b                   	pop    %ebxc6128,4140
  c7:	5d                   	pop    %ebpc7129,4180
  c8:	c3                   	ret    c8130,4220
  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esic9131,4256
  d0:	31 c0                	xor    %eax,%eaxd0132,4313
  d2:	29 d8                	sub    %ebx,%eaxd2134,4390
  d4:	5b                   	pop    %ebxd4136,4437
  d5:	5d                   	pop    %ebpd5137,4477
  d6:	c3                   	ret    d6138,4517
  d7:	89 f6                	mov    %esi,%esid7139,4553
  d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edid9140,4598
uintuint144,4676
  e0:	55                   	push   %ebpe0147,4705
  e1:	89 e5                	mov    %esp,%ebpe1148,4745
  e3:	8b 4d 08             	mov    0x8(%ebp),%ecxe3149,4790
  e6:	80 39 00             	cmpb   $0x0,(%ecx)e6153,4874
  e9:	74 15                	je     100 <strlen+0x20>e9154,4921
  eb:	31 d2                	xor    %edx,%edxeb155,4974
  ed:	8d 76 00             	lea    0x0(%esi),%esied156,5019
  f0:	83 c2 01             	add    $0x1,%edxf0157,5069
  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)f3158,5114
  f7:	89 d0                	mov    %edx,%eaxf7159,5168
  f9:	75 f5                	jne    f0 <strlen+0x10>f9160,5213
  fb:	5d                   	pop    %ebpfb164,5285
  fc:	c3                   	ret    fc165,5325
  fd:	8d 76 00             	lea    0x0(%esi),%esifd166,5361
static inline voidstatic186,5898
    cc = read(0, &c, 1);cc264,8460
intint326,10703
  fd = open(n, O_RDONLY);fd336,10931
  r = fstat(fd, st);r346,11303
  r = fstat(fd, st);r354,11606
intint376,12333
  n = 0;n385,12544
  n = 0;n390,12728
    n = n*10 + *s++ - '0';n396,12972
  dst = vdst;dst428,14026
  src = vsrc;src429,14040
  name: \name450,14752
static voidstatic591,18417
  neg = 0;neg604,18767
    neg = 1;neg609,18898
    x = -xx;x610,18911
    x = -xx;x616,19150
    neg = 1;neg618,19203
    x = xx;x621,19279
  i = 0;i624,19296
  neg = 0;neg676,21380
voidvoid697,22042
  state = 0;state709,22369
  ap = (uint*)(void*)&fmt + 1;ap710,22382
  ap = (uint*)(void*)&fmt + 1;ap716,22633
  state = 0;state719,22760
  ap = (uint*)(void*)&fmt + 1;ap721,22818
    c = fmt[i] & 0xff;c725,23011
    c = fmt[i] & 0xff;c746,23843
        state = '%';state751,24027
          s = "(null)";s772,24747
      state = 0;state805,25922
        state = '%';state826,26627
      state = 0;state841,27266
        s = (char*)*ap;s848,27549
      state = 0;state859,27972
        s = (char*)*ap;s861,28034
      state = 0;state887,29101
      state = 0;state923,30488
          s = "(null)";s926,30603
static Header base;static937,30988
static Header *freep;static938,31008
voidvoid940,31031
  bp = (Header*)ap - 1;bp946,31112
  bp = (Header*)ap - 1;bp955,31458
  freep = p;freep988,32796
  freep = p;freep1020,34130
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1051,35001
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1055,35186
  p = sbrk(nu * sizeof(Header));p1074,35995
      freep = prevp;freep1087,36535
  p = sbrk(nu * sizeof(Header));p1094,36754
      freep = prevp;freep1138,38398

main.c,227
main(void)main18,472
mpenter(void)mpenter42,1308
mpmain(void)mpmain52,1420
pde_t entrypgdir[];  // For entry.Sentrypgdir60,1640
startothers(void)startothers64,1728
pde_t entrypgdir[NPDENTRIES] = {entrypgdir103,2953

spinp,0

file.c,468
struct devsw devsw[NDEV];devsw13,163
  struct spinlock lock;lock15,198
  struct file file[NFILE];file16,222
} ftable;ftable17,249
fileinit(void)fileinit20,265
filealloc(void)filealloc27,364
filedup(struct file *f)filedup45,662
fileclose(struct file *f)fileclose57,872
filestat(struct file *f, struct stat *st)filestat84,1302
fileread(struct file *f, char *addr, int n)fileread97,1492
filewrite(struct file *f, char *addr, int n)filewrite118,1861

ls.asm,4644
_ls:     file format elf32-i386_ls2,1
Disassembly of section .text:Disassembly5,35
intint11,99
   a:	55                   	push   %ebpa17,282
   b:	89 e5                	mov    %esp,%ebpb18,322
   d:	56                   	push   %esid19,367
   e:	53                   	push   %ebxe20,407
   f:	51                   	push   %ecxf21,447
  a0:	83 ec 0c             	sub    $0xc,%espa094,3210
  a3:	53                   	push   %ebxa395,3255
  a4:	e8 07 03 00 00       	call   3b0 <strlen>a496,3295
  a9:	83 c4 0c             	add    $0xc,%espa997,3343
  ac:	50                   	push   %eaxac98,3388
  ad:	53                   	push   %ebxad99,3428
  ae:	68 9c 0d 00 00       	push   $0xd9cae100,3468
  b3:	e8 98 04 00 00       	call   550 <memmove>b3101,3510
  b8:	89 1c 24             	mov    %ebx,(%esp)b8103,3607
  bb:	e8 f0 02 00 00       	call   3b0 <strlen>bb104,3654
  c0:	89 1c 24             	mov    %ebx,(%esp)c0105,3702
  c3:	89 c6                	mov    %eax,%esic3106,3749
  c5:	bb 9c 0d 00 00       	mov    $0xd9c,%ebxc5108,3808
  ca:	e8 e1 02 00 00       	call   3b0 <strlen>ca110,3903
  cf:	ba 0e 00 00 00       	mov    $0xe,%edxcf111,3951
  d4:	83 c4 0c             	add    $0xc,%espd4112,3996
  d7:	05 9c 0d 00 00       	add    $0xd9c,%eaxd7113,4041
  dc:	29 f2                	sub    %esi,%edxdc114,4088
  de:	52                   	push   %edxde115,4133
  df:	6a 20                	push   $0x20df116,4173
  e1:	50                   	push   %eaxe1117,4214
  e2:	e8 f9 02 00 00       	call   3e0 <memset>e2118,4254
  e7:	83 c4 10             	add    $0x10,%espe7120,4316
  ea:	8d 65 f8             	lea    -0x8(%ebp),%espea122,4364
  ed:	89 d8                	mov    %ebx,%eaxed123,4415
  ef:	5b                   	pop    %ebxef124,4460
  f0:	5e                   	pop    %esif0125,4500
  f1:	5d                   	pop    %ebpf1126,4540
  f2:	c3                   	ret    f2127,4580
  f3:	8d b6 00 00 00 00    	lea    0x0(%esi),%esif3128,4616
  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif9129,4666
    p = buf+strlen(buf);p258,9951
    p = buf+strlen(buf);p266,10280
  os = s;os354,13847
intint375,14532
uintuint422,16241
static inline voidstatic464,17464
    cc = read(0, &c, 1);cc542,20026
intint604,22269
  fd = open(n, O_RDONLY);fd614,22497
  r = fstat(fd, st);r624,22869
  r = fstat(fd, st);r632,23172
intint654,23899
  n = 0;n663,24110
  n = 0;n668,24294
    n = n*10 + *s++ - '0';n674,24538
  dst = vdst;dst706,25592
  src = vsrc;src707,25606
  name: \name728,26318
static voidstatic869,29983
  neg = 0;neg882,30333
    neg = 1;neg887,30464
    x = -xx;x888,30477
    x = -xx;x894,30716
    neg = 1;neg896,30769
    x = xx;x899,30845
  i = 0;i902,30862
  neg = 0;neg954,32946
voidvoid975,33608
  state = 0;state987,33935
  ap = (uint*)(void*)&fmt + 1;ap988,33948
  ap = (uint*)(void*)&fmt + 1;ap994,34199
  state = 0;state997,34326
  ap = (uint*)(void*)&fmt + 1;ap999,34384
    c = fmt[i] & 0xff;c1003,34577
    c = fmt[i] & 0xff;c1024,35409
        state = '%';state1029,35593
          s = "(null)";s1050,36313
      state = 0;state1083,37488
        state = '%';state1104,38193
      state = 0;state1119,38832
        s = (char*)*ap;s1126,39115
      state = 0;state1137,39538
        s = (char*)*ap;s1139,39600
      state = 0;state1165,40667
      state = 0;state1201,42054
          s = "(null)";s1204,42169
static Header base;static1215,42554
static Header *freep;static1216,42574
voidvoid1218,42597
  bp = (Header*)ap - 1;bp1224,42678
  bp = (Header*)ap - 1;bp1233,43024
  freep = p;freep1266,44362
  freep = p;freep1298,45696
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1329,46567
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1333,46752
  p = sbrk(nu * sizeof(Header));p1352,47561
      freep = prevp;freep1365,48101
  p = sbrk(nu * sizeof(Header));p1372,48320
      freep = prevp;freep1416,49964
 a01:	0d 00 00 a011434,50597
 a04:	b8 b0 0d 00 00       	mov    $0xdb0,%eaxa041436,50634
 a09:	c7 05 b4 0d 00 00 00 	movl   $0x0,0xdb4a091437,50681
 a10:	00 00 00 a101438,50727
 a13:	e9 44 ff ff ff       	jmp    95c <malloc+0x2c>a131439,50743
 a18:	90                   	nopa181440,50796
 a19:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esia191441,50828
 a20:	8b 08                	mov    (%eax),%ecxa201443,50918
 a22:	89 0a                	mov    %ecx,(%edx)a221444,50965
 a24:	eb b1                	jmp    9d7 <malloc+0xa7>a241445,51012

zombie.asm,4534
_zombie:     file format elf32-i386_zombie2,1
Disassembly of section .text:Disassembly5,39
intint11,124
   a:	55                   	push   %ebpa17,289
   b:	89 e5                	mov    %esp,%ebpb18,329
   d:	51                   	push   %ecxd19,374
   e:	83 ec 04             	sub    $0x4,%espe20,414
  os = s;os49,1318
intint70,2002
  a0:	31 c0                	xor    %eax,%eaxa0105,3344
  a2:	29 d8                	sub    %ebx,%eaxa2107,3421
  a4:	5b                   	pop    %ebxa4109,3468
  a5:	5d                   	pop    %ebpa5110,3508
  a6:	c3                   	ret    a6111,3548
  a7:	89 f6                	mov    %esi,%esia7112,3584
  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia9113,3629
uintuint117,3707
  b0:	55                   	push   %ebpb0120,3736
  b1:	89 e5                	mov    %esp,%ebpb1121,3776
  b3:	8b 4d 08             	mov    0x8(%ebp),%ecxb3122,3821
  b6:	80 39 00             	cmpb   $0x0,(%ecx)b6126,3905
  b9:	74 15                	je     d0 <strlen+0x20>b9127,3952
  bb:	31 d2                	xor    %edx,%edxbb128,4004
  bd:	8d 76 00             	lea    0x0(%esi),%esibd129,4049
  c0:	83 c2 01             	add    $0x1,%edxc0130,4099
  c3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)c3131,4144
  c7:	89 d0                	mov    %edx,%eaxc7132,4198
  c9:	75 f5                	jne    c0 <strlen+0x10>c9133,4243
  cb:	5d                   	pop    %ebpcb137,4315
  cc:	c3                   	ret    cc138,4355
  cd:	8d 76 00             	lea    0x0(%esi),%esicd139,4391
  d0:	31 c0                	xor    %eax,%eaxd0141,4465
  d2:	5d                   	pop    %ebpd2143,4512
  d3:	c3                   	ret    d3144,4552
  d4:	8d b6 00 00 00 00    	lea    0x0(%esi),%esid4145,4588
  da:	8d bf 00 00 00 00    	lea    0x0(%edi),%edida146,4638
  e0:	55                   	push   %ebpe0153,4750
  e1:	89 e5                	mov    %esp,%ebpe1154,4790
  e3:	57                   	push   %edie3155,4835
  e4:	8b 55 08             	mov    0x8(%ebp),%edxe4156,4875
static inline voidstatic159,4928
  e7:	8b 4d 10             	mov    0x10(%ebp),%ecxe7163,5020
  ea:	8b 45 0c             	mov    0xc(%ebp),%eaxea164,5071
  ed:	89 d7                	mov    %edx,%edied165,5121
  ef:	fc                   	cld    ef166,5166
  f0:	f3 aa                	rep stos %al,%es:(%edi)f0167,5202
  f2:	89 d0                	mov    %edx,%eaxf2171,5290
  f4:	5f                   	pop    %edif4172,5335
  f5:	5d                   	pop    %ebpf5173,5375
  f6:	c3                   	ret    f6174,5415
  f7:	89 f6                	mov    %esi,%esif7175,5451
  f9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edif9176,5496
    cc = read(0, &c, 1);cc237,7490
intint299,9733
  fd = open(n, O_RDONLY);fd309,9961
  r = fstat(fd, st);r319,10333
  r = fstat(fd, st);r327,10636
intint349,11363
  n = 0;n358,11574
  n = 0;n363,11758
    n = n*10 + *s++ - '0';n369,12002
  dst = vdst;dst401,13056
  src = vsrc;src402,13070
  name: \name423,13782
static voidstatic564,17447
  neg = 0;neg577,17797
    neg = 1;neg582,17928
    x = -xx;x583,17941
    x = -xx;x589,18180
    neg = 1;neg591,18233
    x = xx;x594,18309
  i = 0;i597,18326
  neg = 0;neg649,20410
voidvoid670,21072
  state = 0;state682,21399
  ap = (uint*)(void*)&fmt + 1;ap683,21412
  ap = (uint*)(void*)&fmt + 1;ap689,21663
  state = 0;state692,21790
  ap = (uint*)(void*)&fmt + 1;ap694,21848
    c = fmt[i] & 0xff;c698,22041
    c = fmt[i] & 0xff;c719,22873
        state = '%';state724,23057
          s = "(null)";s745,23777
      state = 0;state778,24952
        state = '%';state799,25657
      state = 0;state814,26296
        s = (char*)*ap;s821,26579
      state = 0;state832,27002
        s = (char*)*ap;s834,27064
      state = 0;state860,28131
      state = 0;state896,29518
          s = "(null)";s899,29633
static Header base;static910,30018
static Header *freep;static911,30038
voidvoid913,30061
  bp = (Header*)ap - 1;bp919,30142
  bp = (Header*)ap - 1;bp928,30488
  freep = p;freep961,31826
  freep = p;freep993,33160
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1024,34031
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1028,34216
  p = sbrk(nu * sizeof(Header));p1047,35025
      freep = prevp;freep1060,35565
  p = sbrk(nu * sizeof(Header));p1067,35784
      freep = prevp;freep1111,37428

kbd.h,890
#define KBSTATP KBSTATP3,36
#define KBS_DIB KBS_DIB4,101
#define KBDATAP KBDATAP5,155
#define NO NO7,208
#define SHIFT SHIFT9,235
#define CTL CTL10,266
#define ALT ALT11,297
#define CAPSLOCK CAPSLOCK13,329
#define NUMLOCK NUMLOCK14,360
#define SCROLLLOCK SCROLLLOCK15,391
#define E0ESC E0ESC17,423
#define KEY_HOME KEY_HOME20,475
#define KEY_END KEY_END21,504
#define KEY_UP KEY_UP22,533
#define KEY_DN KEY_DN23,562
#define KEY_LF KEY_LF24,591
#define KEY_RT KEY_RT25,620
#define KEY_PGUP KEY_PGUP26,649
#define KEY_PGDN KEY_PGDN27,678
#define KEY_INS KEY_INS28,707
#define KEY_DEL KEY_DEL29,736
#define C(C32,789
static uchar shiftcode[256] =shiftcode34,813
static uchar togglecode[256] =togglecode44,936
static uchar normalmap[256] =normalmap51,1030
static uchar shiftmap[256] =shiftmap73,1899
static uchar ctlmap[256] =ctlmap95,2767

traps.h,893
#define T_DIVIDE T_DIVIDE4,60
#define T_DEBUG T_DEBUG5,108
#define T_NMI T_NMI6,159
#define T_BRKPT T_BRKPT7,217
#define T_OFLOW T_OFLOW8,263
#define T_BOUND T_BOUND9,307
#define T_ILLOP T_ILLOP10,355
#define T_DEVICE T_DEVICE11,405
#define T_DBLFLT T_DBLFLT12,461
#define T_TSS T_TSS14,574
#define T_SEGNP T_SEGNP15,637
#define T_STACK T_STACK16,692
#define T_GPFLT T_GPFLT17,743
#define T_PGFLT T_PGFLT18,803
#define T_FPERR T_FPERR20,893
#define T_ALIGN T_ALIGN21,949
#define T_MCHK T_MCHK22,999
#define T_SIMDERR T_SIMDERR23,1048
#define T_SYSCALL T_SYSCALL27,1226
#define T_DEFAULT T_DEFAULT28,1273
#define T_IRQ0 T_IRQ030,1318
#define IRQ_TIMER IRQ_TIMER32,1385
#define IRQ_KBD IRQ_KBD33,1412
#define IRQ_COM1 IRQ_COM134,1439
#define IRQ_IDE IRQ_IDE35,1466
#define IRQ_ERROR IRQ_ERROR36,1493
#define IRQ_SPURIOUS IRQ_SPURIOUS37,1520

ln.c,39
main(int argc, char *argv[])main6,60

ioapic.c,625
#define IOAPIC IOAPIC9,205
#define REG_ID REG_ID11,274
#define REG_VER REG_VER12,321
#define REG_TABLE REG_TABLE13,373
#define INT_DISABLED INT_DISABLED20,689
#define INT_LEVEL INT_LEVEL21,746
#define INT_ACTIVELOW INT_ACTIVELOW22,811
#define INT_LOGICAL INT_LOGICAL23,870
volatile struct ioapic *ioapic;ioapic25,944
struct ioapic {ioapic28,1040
  uint reg;reg29,1056
  uint pad[3];pad30,1068
  uint data;data31,1083
ioapicread(int reg)ioapicread35,1112
ioapicwrite(int reg, uint data)ioapicwrite42,1193
ioapicinit(void)ioapicinit49,1279
ioapicenable(int irq, int cpunum)ioapicenable68,1775

sleeplock.c,234
initsleeplock(struct sleeplock *lk, char *name)initsleeplock14,201
acquiresleep(struct sleeplock *lk)acquiresleep23,346
releasesleep(struct sleeplock *lk)releasesleep35,527
holdingsleep(struct sleeplock *lk)holdingsleep45,658

entryother.S,106
start:start24,847
start32:start3248,1604
spin:spin80,2584
gdt:gdt84,2617
gdtdesc:gdtdesc90,2708

usys.S,57
#define SYSCALL(name) \SYSCALL4,41
  name: \name6,82

sleep1.p,0

fcntl.h,123
#define O_RDONLY O_RDONLY1,0
#define O_WRONLY O_WRONLY2,24
#define O_RDWR O_RDWR3,48
#define O_CREATE O_CREATE4,72

.dir-locals.el,0

types.h,153
typedef unsigned int   uint;uint1,0
typedef unsigned short ushort;ushort2,29
typedef unsigned char  uchar;uchar3,60
typedef uint pde_t;pde_t4,90

kbd.c,56
kbdgetc(void)kbdgetc7,76
kbdintr(void)kbdintr47,883

mkfs.c,976
#define stat stat8,119
#define static_assert(static_assert15,274
#define NINODES NINODES18,358
int nbitmap = FSSIZE/(BSIZE*8) + 1;nbitmap23,475
int ninodeblocks = NINODES / IPB + 1;ninodeblocks24,511
int nlog = LOGSIZE;nlog25,549
int nmeta;    // Number of meta blocks (boot, sb, nlog, inode, bitmap)nmeta26,569
int nblocks;  // Number of data blocksnblocks27,640
int fsfd;fsfd29,680
struct superblock sb;sb30,690
char zeroes[BSIZE];zeroes31,712
uint freeinode = 1;freeinode32,732
uint freeblock;freeblock33,752
xshort(ushort x)xshort46,1030
xint(uint x)xint56,1135
main(int argc, char *argv[])main68,1269
wsect(uint sec, void *buf)wsect171,3642
winode(uint inum, struct dinode *ip)winode184,3845
rinode(uint inum, struct dinode *ip)rinode198,4066
rsect(uint sec, void *buf)rsect211,4269
ialloc(ushort type)ialloc224,4470
balloc(int used)balloc238,4688
#define min(min253,5024
iappend(uint inum, void *xp, int n)iappend256,5072

entryother.asm,112
Disassembly of section .text:Disassembly5,48
start:start12,186
start32:start3250,1542
spin:spin106,3624

wc.asm,4130
_wc:     file format elf32-i386_wc2,1
Disassembly of section .text:Disassembly5,35
intint11,131
   a:	55                   	push   %ebpa17,314
   b:	89 e5                	mov    %esp,%ebpb18,354
   d:	57                   	push   %edid19,399
   e:	56                   	push   %esie20,439
   f:	53                   	push   %ebxf21,479
  a0:	55                   	push   %ebpa099,3169
  a1:	89 e5                	mov    %esp,%ebpa1100,3209
  a3:	57                   	push   %edia3101,3254
  a4:	56                   	push   %esia4102,3294
  a5:	53                   	push   %ebxa5103,3334
  l = w = c = 0;l104,3374
  a6:	31 db                	xor    %ebx,%ebxa6105,3391
  a8:	83 ec 1c             	sub    $0x1c,%espa8107,3438
  inword = 0;inword108,3484
  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)ab109,3498
  l = w = c = 0;l110,3550
  b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)b2111,3567
  b9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)b9112,3619
  c0:	83 ec 04             	sub    $0x4,%espc0114,3718
  c3:	68 00 02 00 00       	push   $0x200c3115,3763
  c8:	68 c0 0b 00 00       	push   $0xbc0c8116,3805
  cd:	ff 75 08             	pushl  0x8(%ebp)cd117,3847
  d0:	e8 15 03 00 00       	call   3ea <read>d0118,3892
  d5:	83 c4 10             	add    $0x10,%espd5119,3938
  d8:	83 f8 00             	cmp    $0x0,%eaxd8120,3984
  db:	89 c6                	mov    %eax,%esidb121,4029
  dd:	7e 61                	jle    140 <wc+0xa0>dd122,4074
  df:	31 ff                	xor    %edi,%edidf124,4147
  e1:	eb 13                	jmp    f6 <wc+0x56>e1125,4192
  e3:	90                   	nope3126,4240
  e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esie4127,4272
        inword = 0;inword128,4329
  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)e8129,4349
  ef:	83 c7 01             	add    $0x1,%edief131,4425
  f2:	39 fe                	cmp    %edi,%esif2132,4470
  f4:	74 42                	je     138 <wc+0x98>f4133,4515
  f6:	0f be 87 c0 0b 00 00 	movsbl 0xbc0(%edi),%eaxf6135,4589
  fd:	31 c9                	xor    %ecx,%ecxfd137,4654
  ff:	3c 0a                	cmp    $0xa,%alff138,4699
        inword = 1;inword159,5533
  os = s;os214,7482
intint235,8167
uintuint282,9876
static inline voidstatic324,11099
    cc = read(0, &c, 1);cc402,13661
intint464,15904
  fd = open(n, O_RDONLY);fd474,16132
  r = fstat(fd, st);r484,16504
  r = fstat(fd, st);r492,16807
intint514,17534
  n = 0;n523,17745
  n = 0;n528,17929
    n = n*10 + *s++ - '0';n534,18173
  dst = vdst;dst566,19227
  src = vsrc;src567,19241
  name: \name588,19953
static voidstatic729,23618
  neg = 0;neg742,23968
    neg = 1;neg747,24099
    x = -xx;x748,24112
    x = -xx;x754,24351
    neg = 1;neg756,24404
    x = xx;x759,24480
  i = 0;i762,24497
  neg = 0;neg814,26581
voidvoid835,27243
  state = 0;state847,27570
  ap = (uint*)(void*)&fmt + 1;ap848,27583
  ap = (uint*)(void*)&fmt + 1;ap854,27834
  state = 0;state857,27961
  ap = (uint*)(void*)&fmt + 1;ap859,28019
    c = fmt[i] & 0xff;c863,28212
    c = fmt[i] & 0xff;c884,29044
        state = '%';state889,29228
          s = "(null)";s910,29948
      state = 0;state943,31123
        state = '%';state964,31828
      state = 0;state979,32467
        s = (char*)*ap;s986,32750
      state = 0;state997,33173
        s = (char*)*ap;s999,33235
      state = 0;state1025,34302
      state = 0;state1061,35689
          s = "(null)";s1064,35804
static Header base;static1075,36189
static Header *freep;static1076,36209
voidvoid1078,36232
  bp = (Header*)ap - 1;bp1084,36313
  bp = (Header*)ap - 1;bp1093,36659
  freep = p;freep1126,37997
  freep = p;freep1158,39331
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1189,40202
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1193,40387
  p = sbrk(nu * sizeof(Header));p1212,41196
      freep = prevp;freep1225,41736
  p = sbrk(nu * sizeof(Header));p1232,41955
      freep = prevp;freep1276,43599

picirq.c,91
#define IO_PIC1 IO_PIC16,119
#define IO_PIC2 IO_PIC27,172
picinit(void)picinit11,304

fs.c,1376
#define min(min24,692
struct superblock sb; sb28,855
readsb(int dev, struct superblock *sb)readsb32,909
bzero(int dev, int bno)bzero43,1075
balloc(uint dev)balloc57,1265
bfree(int dev, uint b)bfree82,1787
  struct spinlock lock;lock167,4795
  struct inode inode[NINODE];inode168,4819
} icache;icache169,4849
iinit(int dev)iinit172,4865
ialloc(uint dev, short type)ialloc195,5469
iupdate(struct inode *ip)iupdate221,6143
iget(uint dev, uint inum)iget242,6682
idup(struct inode *ip)idup277,7393
ilock(struct inode *ip)ilock288,7570
iunlock(struct inode *ip)iunlock316,8153
iput(struct inode *ip)iput332,8618
iunlockput(struct inode *ip)iunlockput356,9090
bmap(struct inode *ip, uint bn)bmap373,9527
itrunc(struct inode *ip)itrunc408,10355
stati(struct inode *ip, struct stat *st)stati440,10927
readi(struct inode *ip, char *dst, uint off, uint n)readi453,11159
writei(struct inode *ip, char *src, uint off, uint n)writei482,11795
namecmp(const char *s, const char *t)namecmp517,12483
dirlookup(struct inode *dp, char *name, uint *poff)dirlookup525,12666
dirlink(struct inode *dp, char *name, uint inum)dirlink552,13258
skipelem(char *path, char *name)skipelem596,14378
namex(char *path, int nameiparent, char *name)namex625,15008
namei(char *path)namei660,15627
nameiparent(char *path, char *name)nameiparent667,15716

ln.asm,4411
_ln:     file format elf32-i386_ln2,1
Disassembly of section .text:Disassembly5,35
intint11,120
   a:	ff 71 fc             	pushl  -0x4(%ecx)a19,323
   d:	55                   	push   %ebpd20,369
   e:	89 e5                	mov    %esp,%ebpe21,409
  os = s;os74,2299
intint95,2983
  a0:	84 c0                	test   %al,%ala0106,3369
  a2:	75 1c                	jne    c0 <strcmp+0x30>a2107,3412
  a4:	eb 2a                	jmp    d0 <strcmp+0x40>a4108,3464
  a6:	8d 76 00             	lea    0x0(%esi),%esia6109,3516
  a9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edia9110,3566
  b0:	83 c2 01             	add    $0x1,%edxb0112,3637
  b3:	0f b6 02             	movzbl (%edx),%eaxb3114,3706
  b6:	83 c1 01             	add    $0x1,%ecxb6116,3767
  b9:	0f b6 19             	movzbl (%ecx),%ebxb9117,3812
  bc:	84 c0                	test   %al,%albc119,3883
  be:	74 10                	je     d0 <strcmp+0x40>be120,3926
  c0:	38 d8                	cmp    %bl,%alc0121,3978
  c2:	74 ec                	je     b0 <strcmp+0x20>c2122,4021
  c4:	29 d8                	sub    %ebx,%eaxc4124,4105
  c6:	5b                   	pop    %ebxc6126,4152
  c7:	5d                   	pop    %ebpc7127,4192
  c8:	c3                   	ret    c8128,4232
  c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esic9129,4268
  d0:	31 c0                	xor    %eax,%eaxd0130,4325
  d2:	29 d8                	sub    %ebx,%eaxd2132,4402
  d4:	5b                   	pop    %ebxd4134,4449
  d5:	5d                   	pop    %ebpd5135,4489
  d6:	c3                   	ret    d6136,4529
  d7:	89 f6                	mov    %esi,%esid7137,4565
  d9:	8d bc 27 00 00 00 00 	lea    0x0(%edi,%eiz,1),%edid9138,4610
uintuint142,4688
  e0:	55                   	push   %ebpe0145,4717
  e1:	89 e5                	mov    %esp,%ebpe1146,4757
  e3:	8b 4d 08             	mov    0x8(%ebp),%ecxe3147,4802
  e6:	80 39 00             	cmpb   $0x0,(%ecx)e6151,4886
  e9:	74 15                	je     100 <strlen+0x20>e9152,4933
  eb:	31 d2                	xor    %edx,%edxeb153,4986
  ed:	8d 76 00             	lea    0x0(%esi),%esied154,5031
  f0:	83 c2 01             	add    $0x1,%edxf0155,5081
  f3:	80 3c 11 00          	cmpb   $0x0,(%ecx,%edx,1)f3156,5126
  f7:	89 d0                	mov    %edx,%eaxf7157,5180
  f9:	75 f5                	jne    f0 <strlen+0x10>f9158,5225
  fb:	5d                   	pop    %ebpfb162,5297
  fc:	c3                   	ret    fc163,5337
  fd:	8d 76 00             	lea    0x0(%esi),%esifd164,5373
static inline voidstatic184,5910
    cc = read(0, &c, 1);cc262,8472
intint324,10715
  fd = open(n, O_RDONLY);fd334,10943
  r = fstat(fd, st);r344,11315
  r = fstat(fd, st);r352,11618
intint374,12345
  n = 0;n383,12556
  n = 0;n388,12740
    n = n*10 + *s++ - '0';n394,12984
  dst = vdst;dst426,14038
  src = vsrc;src427,14052
  name: \name448,14764
static voidstatic589,18429
  neg = 0;neg602,18779
    neg = 1;neg607,18910
    x = -xx;x608,18923
    x = -xx;x614,19162
    neg = 1;neg616,19215
    x = xx;x619,19291
  i = 0;i622,19308
  neg = 0;neg674,21392
voidvoid695,22054
  state = 0;state707,22381
  ap = (uint*)(void*)&fmt + 1;ap708,22394
  ap = (uint*)(void*)&fmt + 1;ap714,22645
  state = 0;state717,22772
  ap = (uint*)(void*)&fmt + 1;ap719,22830
    c = fmt[i] & 0xff;c723,23023
    c = fmt[i] & 0xff;c744,23855
        state = '%';state749,24039
          s = "(null)";s770,24759
      state = 0;state803,25934
        state = '%';state824,26639
      state = 0;state839,27278
        s = (char*)*ap;s846,27561
      state = 0;state857,27984
        s = (char*)*ap;s859,28046
      state = 0;state885,29113
      state = 0;state921,30500
          s = "(null)";s924,30615
static Header base;static935,31000
static Header *freep;static936,31020
voidvoid938,31043
  bp = (Header*)ap - 1;bp944,31124
  bp = (Header*)ap - 1;bp953,31470
  freep = p;freep986,32808
  freep = p;freep1018,34142
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1049,35013
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1053,35198
  p = sbrk(nu * sizeof(Header));p1072,36007
      freep = prevp;freep1085,36547
  p = sbrk(nu * sizeof(Header));p1092,36766
      freep = prevp;freep1136,38410

printf.c,142
putc(int fd, char c)putc6,68
printint(int fd, int xx, int base, int sgn)printint12,126
printf(int fd, const char *fmt, ...)printf40,558

usertests.c,1674
char buf[8192];buf11,173
char name[3];name12,189
char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };echoargv13,203
int stdout = 1;stdout14,263
iputtest(void)iputtest18,337
exitiputtest(void)exitiputtest43,831
openiputtest(void)openiputtest85,1688
opentest(void)opentest119,2277
writetest(void)writetest139,2609
writetest1(void)writetest1188,3681
createtest(void)createtest245,4745
void dirtest(void)dirtest267,5152
exectest(void)exectest294,5585
pipe1(void)pipe1306,5771
preempt(void)preempt359,6798
exitwait(void)exitwait405,7516
mem(void)mem428,7841
sharedfd(void)sharedfd465,8476
fourfiles(void)fourfiles518,9579
createdelete(void)createdelete584,10824
unlinkread(void)unlinkread657,12295
linktest(void)linktest702,13157
concreate(void)concreate765,14254
linkunlink()linkunlink858,16066
bigdir(void)bigdir893,16603
subdir(void)subdir935,17306
bigwrite(void)bigwrite1119,21172
bigfile(void)bigfile1148,21682
fourteen(void)fourteen1204,22695
rmdot(void)rmdot1245,23700
dirfile(void)dirfile1284,24419
iref(void)iref1344,25624
forktest(void)forktest1380,26347
sbrktest(void)sbrktest1415,26824
#define BIG BIG1452,27530
validateint(int *p)validateint1550,29814
validatetest(void)validatetest1563,30039
char uninit[10000];uninit1593,30651
bsstest(void)bsstest1595,30676
bigargtest(void)bigargtest1613,31052
fsfull()fsfull1648,32005
uio()uio1699,33040
  #define RTC_ADDR RTC_ADDR1701,33048
  #define RTC_DATA RTC_DATA1702,33072
void argptest()argptest1727,33622
unsigned long randstate = 1;randstate1740,33824
rand()rand1742,33866
main(int argc, char *argv[])main1749,33950

grep.c,264
char buf[1024];buf7,107
grep(char *pattern, int fd)grep11,154
main(int argc, char *argv[])main39,586
match(char *re, char *text)match73,1156
int matchhere(char *re, char *text)matchhere85,1410
int matchstar(int c, char *re, char *text)matchstar99,1756

stressfs.asm,4028
_stressfs:     file format elf32-i386_stressfs2,1
Disassembly of section .text:Disassembly5,41
intint11,125
   c:	ff 71 fc             	pushl  -0x4(%ecx)c20,352
   f:	55                   	push   %ebpf21,398
  fd = open(path, O_CREATE | O_RDWR);fd73,2227
  fd = open(path, O_CREATE | O_RDWR);fd81,2542
  a2:	50                   	push   %eaxa286,2755
  a3:	e8 2a 03 00 00       	call   3d2 <open>a387,2795
  a8:	83 c4 10             	add    $0x10,%espa888,2841
  ab:	89 c7                	mov    %eax,%ediab89,2887
  ad:	8d 76 00             	lea    0x0(%esi),%esiad90,2932
  b0:	83 ec 04             	sub    $0x4,%espb094,3072
  b3:	68 00 02 00 00       	push   $0x200b395,3117
  b8:	56                   	push   %esib896,3159
  b9:	57                   	push   %edib997,3199
  ba:	e8 f3 02 00 00       	call   3b2 <write>ba98,3239
  bf:	83 c4 10             	add    $0x10,%espbf100,3312
  c2:	83 eb 01             	sub    $0x1,%ebxc2101,3358
  c5:	75 e9                	jne    b0 <main+0xb0>c5102,3403
  c7:	83 ec 0c             	sub    $0xc,%espc7104,3466
  ca:	57                   	push   %edica105,3511
  cb:	e8 ea 02 00 00       	call   3ba <close>cb106,3551
  d0:	58                   	pop    %eaxd0109,3622
  d1:	5a                   	pop    %edxd1110,3662
  d2:	68 55 08 00 00       	push   $0x855d2111,3702
  d7:	6a 01                	push   $0x1d7112,3744
  d9:	e8 02 04 00 00       	call   4e0 <printf>d9113,3784
  fd = open(path, O_RDONLY);fd115,3833
  de:	59                   	pop    %ecxde116,3862
  df:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eaxdf117,3902
  e5:	5b                   	pop    %ebxe5118,3955
  e6:	6a 00                	push   $0x0e6119,3995
  e8:	50                   	push   %eaxe8120,4035
  e9:	bb 14 00 00 00       	mov    $0x14,%ebxe9121,4075
  ee:	e8 df 02 00 00       	call   3d2 <open>ee122,4121
  f3:	83 c4 10             	add    $0x10,%espf3123,4167
  f6:	89 c7                	mov    %eax,%edif6124,4213
  f8:	90                   	nopf8125,4258
  f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esif9126,4290
  os = s;os173,5811
intint194,6496
uintuint241,8205
static inline voidstatic283,9428
    cc = read(0, &c, 1);cc361,11990
intint423,14233
  fd = open(n, O_RDONLY);fd433,14461
  r = fstat(fd, st);r443,14833
  r = fstat(fd, st);r451,15136
intint473,15863
  n = 0;n482,16074
  n = 0;n487,16258
    n = n*10 + *s++ - '0';n493,16502
  dst = vdst;dst525,17556
  src = vsrc;src526,17570
  name: \name547,18282
static voidstatic688,21947
  neg = 0;neg701,22297
    neg = 1;neg706,22428
    x = -xx;x707,22441
    x = -xx;x713,22680
    neg = 1;neg715,22733
    x = xx;x718,22809
  i = 0;i721,22826
  neg = 0;neg773,24910
voidvoid794,25572
  state = 0;state806,25899
  ap = (uint*)(void*)&fmt + 1;ap807,25912
  ap = (uint*)(void*)&fmt + 1;ap813,26163
  state = 0;state816,26290
  ap = (uint*)(void*)&fmt + 1;ap818,26348
    c = fmt[i] & 0xff;c822,26541
    c = fmt[i] & 0xff;c843,27373
        state = '%';state848,27557
          s = "(null)";s869,28277
      state = 0;state902,29452
        state = '%';state923,30157
      state = 0;state938,30796
        s = (char*)*ap;s945,31079
      state = 0;state956,31502
        s = (char*)*ap;s958,31564
      state = 0;state984,32631
      state = 0;state1020,34018
          s = "(null)";s1023,34133
static Header base;static1034,34518
static Header *freep;static1035,34538
voidvoid1037,34561
  bp = (Header*)ap - 1;bp1043,34642
  bp = (Header*)ap - 1;bp1052,34988
  freep = p;freep1085,36326
  freep = p;freep1117,37660
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1148,38531
  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;nunits1152,38716
  p = sbrk(nu * sizeof(Header));p1171,39525
      freep = prevp;freep1184,40065
  p = sbrk(nu * sizeof(Header));p1191,40284
      freep = prevp;freep1235,41928

param.h,384
#define NPROC NPROC1,0
#define KSTACKSIZE KSTACKSIZE2,56
#define NCPU NCPU3,117
#define NOFILE NOFILE4,168
#define NFILE NFILE5,219
#define NINODE NINODE6,269
#define NDEV NDEV7,330
#define ROOTDEV ROOTDEV8,386
#define MAXARG MAXARG9,453
#define MAXOPBLOCKS MAXOPBLOCKS10,500
#define LOGSIZE LOGSIZE11,561
#define NBUF NBUF12,633
#define FSSIZE FSSIZE13,699
